<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Thomas&#39;s Blog</title>
  
  <subtitle>王韬</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-02-02T14:17:48.392Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>孤岛violet</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>操作像素的14中方法</title>
    <link href="http://yoursite.com/2019/02/02/%E6%93%8D%E4%BD%9C%E5%83%8F%E7%B4%A0%E7%9A%8414%E4%B8%AD%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/02/02/操作像素的14中方法/</id>
    <published>2019-02-02T14:00:24.000Z</published>
    <updated>2019-02-02T14:17:48.392Z</updated>
    
    <content type="html"><![CDATA[<p>​    OpenCV是我研途中重点打交道的工具库。教研室流传下来的图像处理程序都是基于OpenCV1的code，那更底层，更多指针与结构体。而如今OpenCV4都已经更新了，C++强调接口的实用是大势所趋，用到什么去看相关的函数即可。这半年的学习让我深刻体会到线性学习的弊端和不足，这也是研究生主要看论文而本科生主要以课本为主的原因，链式学习更能快速打通各个学科之间的交叉与联系，保证学习的效率。</p><p>今天记录一下操作元素的思路。课题中的图像处理往往是通过各种方法提取到边缘后扫点，将点储存在容器中再拟合圆或者直线。如何快速扫描像素呢，国外的一本书中给出了14中不同的方式。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------------------【宏定义部分】---------------------------------------------</span></span><br><span class="line"><span class="comment">//        描述：包含程序所使用宏定义</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTESTS 14</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NITERATIONS 20</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------------------- 【方法一】-------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用.ptr 和 []</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce0</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> nl= image.rows; <span class="comment">//行数</span></span><br><span class="line">      <span class="keyword">int</span> nc= image.cols * image.channels(); <span class="comment">//每行元素的总元素数量</span></span><br><span class="line">              </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nl; j++)</span><br><span class="line">      &#123;</span><br><span class="line"></span><br><span class="line">          uchar* data= image.ptr&lt;uchar&gt;(j);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nc; i++)</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line">                 </span><br><span class="line">                  data[i]= data[i]/div*div + div/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">            &#125; <span class="comment">//单行处理结束                  </span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------------------------【方法二】-------------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用 .ptr 和 * ++</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce1</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> nl= image.rows; <span class="comment">//行数</span></span><br><span class="line">      <span class="keyword">int</span> nc= image.cols * image.channels(); <span class="comment">//每行元素的总元素数量</span></span><br><span class="line">              </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nl; j++)</span><br><span class="line">      &#123;</span><br><span class="line"></span><br><span class="line">          uchar* data= image.ptr&lt;uchar&gt;(j);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nc; i++)</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line">                 </span><br><span class="line">                 *data++= *data/div*div + div/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">            &#125; <span class="comment">//单行处理结束              </span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------------------------------【方法三】-------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用.ptr 和 * ++ 以及模操作</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce2</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> nl= image.rows; <span class="comment">//行数</span></span><br><span class="line">      <span class="keyword">int</span> nc= image.cols * image.channels(); <span class="comment">//每行元素的总元素数量</span></span><br><span class="line">              </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nl; j++)</span><br><span class="line">      &#123;</span><br><span class="line"></span><br><span class="line">          uchar* data= image.ptr&lt;uchar&gt;(j);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nc; i++)</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line">       </span><br><span class="line">                  <span class="keyword">int</span> v= *data;</span><br><span class="line">                  *data++= v - v%div + div/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">            &#125; <span class="comment">//单行处理结束                   </span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------------------【方法四】---------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用.ptr 和 * ++ 以及位操作</span></span><br><span class="line"><span class="comment">//----------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce3</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> nl= image.rows; <span class="comment">//行数</span></span><br><span class="line">      <span class="keyword">int</span> nc= image.cols * image.channels(); <span class="comment">//每行元素的总元素数量</span></span><br><span class="line">      <span class="keyword">int</span> n= <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="built_in">log</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(div))/<span class="built_in">log</span>(<span class="number">2.0</span>));</span><br><span class="line">      <span class="comment">//掩码值</span></span><br><span class="line">      uchar mask= <span class="number">0xFF</span>&lt;&lt;n; <span class="comment">// e.g. 对于 div=16, mask= 0xF0</span></span><br><span class="line">              </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nl; j++) &#123;</span><br><span class="line"></span><br><span class="line">          uchar* data= image.ptr&lt;uchar&gt;(j);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nc; i++) &#123;</span><br><span class="line">            <span class="comment">//------------开始处理每个像素-------------------</span></span><br><span class="line">                 </span><br><span class="line">            *data++= *data&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">            &#125;  <span class="comment">//单行处理结束            </span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------------------【方法五】----------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用指针算术运算</span></span><br><span class="line"><span class="comment">//---------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce4</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> nl= image.rows; <span class="comment">//行数</span></span><br><span class="line">      <span class="keyword">int</span> nc= image.cols * image.channels(); <span class="comment">//每行元素的总元素数量</span></span><br><span class="line">      <span class="keyword">int</span> n= <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="built_in">log</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(div))/<span class="built_in">log</span>(<span class="number">2.0</span>));</span><br><span class="line">      <span class="keyword">int</span> step= image.step; <span class="comment">//有效宽度</span></span><br><span class="line">      <span class="comment">//掩码值</span></span><br><span class="line">      uchar mask= <span class="number">0xFF</span>&lt;&lt;n; <span class="comment">// e.g. 对于 div=16, mask= 0xF0</span></span><br><span class="line">              </span><br><span class="line">      <span class="comment">//获取指向图像缓冲区的指针</span></span><br><span class="line">      uchar *data= image.data;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nl; j++)</span><br><span class="line">      &#123;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nc; i++)</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line">                 </span><br><span class="line">            *(data+i)= *data&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">            &#125; <span class="comment">//单行处理结束              </span></span><br><span class="line"></span><br><span class="line">            data+= step;  <span class="comment">// next line</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------------------------【方法六】----------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用 .ptr 和 * ++以及位运算、image.cols * image.channels()</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce5</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> nl= image.rows; <span class="comment">//行数</span></span><br><span class="line">      <span class="keyword">int</span> n= <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="built_in">log</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(div))/<span class="built_in">log</span>(<span class="number">2.0</span>));</span><br><span class="line">      <span class="comment">//掩码值</span></span><br><span class="line">      uchar mask= <span class="number">0xFF</span>&lt;&lt;n; <span class="comment">// e.g. 例如div=16, mask= 0xF0</span></span><br><span class="line">              </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nl; j++)</span><br><span class="line">      &#123;</span><br><span class="line"></span><br><span class="line">          uchar* data= image.ptr&lt;uchar&gt;(j);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;image.cols * image.channels(); i++)</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line">                 </span><br><span class="line">            *data++= *data&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">            &#125; <span class="comment">//单行处理结束            </span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// -------------------------------------【方法七】----------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用.ptr 和 * ++ 以及位运算(continuous)</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce6</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> nl= image.rows; <span class="comment">//行数</span></span><br><span class="line">      <span class="keyword">int</span> nc= image.cols * image.channels(); <span class="comment">//每行元素的总元素数量</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (image.isContinuous())  </span><br><span class="line">      &#123;</span><br><span class="line">          <span class="comment">//无填充像素</span></span><br><span class="line">          nc= nc*nl;</span><br><span class="line">          nl= <span class="number">1</span>;  <span class="comment">// 为一维数列</span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> n= <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="built_in">log</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(div))/<span class="built_in">log</span>(<span class="number">2.0</span>));</span><br><span class="line">      <span class="comment">//掩码值</span></span><br><span class="line">      uchar mask= <span class="number">0xFF</span>&lt;&lt;n; <span class="comment">// e.g. 比如div=16, mask= 0xF0</span></span><br><span class="line">              </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nl; j++) &#123;</span><br><span class="line"></span><br><span class="line">          uchar* data= image.ptr&lt;uchar&gt;(j);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nc; i++) &#123;</span><br><span class="line">            <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line">                 </span><br><span class="line">            *data++= *data&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">            &#125; <span class="comment">//单行处理结束                   </span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------【方法八】------------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用 .ptr 和 * ++ 以及位运算 (continuous+channels)</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce7</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> nl= image.rows; <span class="comment">//行数</span></span><br><span class="line">      <span class="keyword">int</span> nc= image.cols ; <span class="comment">//列数</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (image.isContinuous())  </span><br><span class="line">      &#123;</span><br><span class="line">          <span class="comment">//无填充像素</span></span><br><span class="line">          nc= nc*nl;</span><br><span class="line">          nl= <span class="number">1</span>;  <span class="comment">// 为一维数组</span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> n= <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="built_in">log</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(div))/<span class="built_in">log</span>(<span class="number">2.0</span>));</span><br><span class="line">      <span class="comment">//掩码值</span></span><br><span class="line">      uchar mask= <span class="number">0xFF</span>&lt;&lt;n; <span class="comment">// e.g. 比如div=16, mask= 0xF0</span></span><br><span class="line">              </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nl; j++) &#123;</span><br><span class="line"></span><br><span class="line">          uchar* data= image.ptr&lt;uchar&gt;(j);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nc; i++) &#123;</span><br><span class="line">            <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line">                 </span><br><span class="line">            *data++= *data&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">            *data++= *data&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">            *data++= *data&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">            &#125; <span class="comment">//单行处理结束                    </span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// -----------------------------------【方法九】 ------------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用Mat_ iterator</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce8</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//获取迭代器</span></span><br><span class="line">      Mat_&lt;Vec3b&gt;::iterator it= image.begin&lt;Vec3b&gt;();</span><br><span class="line">      Mat_&lt;Vec3b&gt;::iterator itend= image.end&lt;Vec3b&gt;();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> ( ; it!= itend; ++it) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line"></span><br><span class="line">        (*it)[<span class="number">0</span>]= (*it)[<span class="number">0</span>]/div*div + div/<span class="number">2</span>;</span><br><span class="line">        (*it)[<span class="number">1</span>]= (*it)[<span class="number">1</span>]/div*div + div/<span class="number">2</span>;</span><br><span class="line">        (*it)[<span class="number">2</span>]= (*it)[<span class="number">2</span>]/div*div + div/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">      &#125;<span class="comment">//单行处理结束  </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------------【方法十】-----------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用Mat_ iterator以及位运算</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce9</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// div必须是2的幂</span></span><br><span class="line">      <span class="keyword">int</span> n= <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="built_in">log</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(div))/<span class="built_in">log</span>(<span class="number">2.0</span>));</span><br><span class="line">      <span class="comment">//掩码值</span></span><br><span class="line">      uchar mask= <span class="number">0xFF</span>&lt;&lt;n; <span class="comment">// e.g. 比如 div=16, mask= 0xF0</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 获取迭代器</span></span><br><span class="line">      Mat_&lt;Vec3b&gt;::iterator it= image.begin&lt;Vec3b&gt;();</span><br><span class="line">      Mat_&lt;Vec3b&gt;::iterator itend= image.end&lt;Vec3b&gt;();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//扫描所有元素</span></span><br><span class="line">      <span class="keyword">for</span> ( ; it!= itend; ++it)</span><br><span class="line">      &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line"></span><br><span class="line">        (*it)[<span class="number">0</span>]= (*it)[<span class="number">0</span>]&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">        (*it)[<span class="number">1</span>]= (*it)[<span class="number">1</span>]&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">        (*it)[<span class="number">2</span>]= (*it)[<span class="number">2</span>]&amp;mask + div/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">      &#125;<span class="comment">//单行处理结束  </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------【方法十一】---------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用Mat Iterator_</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce10</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//获取迭代器</span></span><br><span class="line">      Mat_&lt;Vec3b&gt; cimage= image;</span><br><span class="line">      Mat_&lt;Vec3b&gt;::iterator it=cimage.begin();</span><br><span class="line">      Mat_&lt;Vec3b&gt;::iterator itend=cimage.end();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> ( ; it!= itend; it++) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line"></span><br><span class="line">        (*it)[<span class="number">0</span>]= (*it)[<span class="number">0</span>]/div*div + div/<span class="number">2</span>;</span><br><span class="line">        (*it)[<span class="number">1</span>]= (*it)[<span class="number">1</span>]/div*div + div/<span class="number">2</span>;</span><br><span class="line">        (*it)[<span class="number">2</span>]= (*it)[<span class="number">2</span>]/div*div + div/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------------------【方法十二】--------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用动态地址计算配合at</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce11</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> nl= image.rows; <span class="comment">//行数</span></span><br><span class="line">      <span class="keyword">int</span> nc= image.cols; <span class="comment">//列数</span></span><br><span class="line">              </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nl; j++)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nc; i++)</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line">                 </span><br><span class="line">                  image.at&lt;Vec3b&gt;(j,i)[<span class="number">0</span>]=     image.at&lt;Vec3b&gt;(j,i)[<span class="number">0</span>]/div*div + div/<span class="number">2</span>;</span><br><span class="line">                  image.at&lt;Vec3b&gt;(j,i)[<span class="number">1</span>]=     image.at&lt;Vec3b&gt;(j,i)[<span class="number">1</span>]/div*div + div/<span class="number">2</span>;</span><br><span class="line">                  image.at&lt;Vec3b&gt;(j,i)[<span class="number">2</span>]=     image.at&lt;Vec3b&gt;(j,i)[<span class="number">2</span>]/div*div + div/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">            &#125; <span class="comment">//单行处理结束                 </span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------------【方法十三】-----------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用图像的输入与输出</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce12</span><span class="params">(<span class="keyword">const</span> Mat &amp;image, <span class="comment">//输入图像</span></span></span></span><br><span class="line"><span class="function"><span class="params">                 Mat &amp;result,      <span class="comment">// 输出图像</span></span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> nl= image.rows; <span class="comment">//行数</span></span><br><span class="line">      <span class="keyword">int</span> nc= image.cols ; <span class="comment">//列数</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//准备好初始化后的Mat给输出图像</span></span><br><span class="line">      result.create(image.rows,image.cols,image.type());</span><br><span class="line"></span><br><span class="line">      <span class="comment">//创建无像素填充的图像</span></span><br><span class="line">      nc= nc*nl;</span><br><span class="line">      nl= <span class="number">1</span>;  <span class="comment">//单维数组</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> n= <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="built_in">log</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(div))/<span class="built_in">log</span>(<span class="number">2.0</span>));</span><br><span class="line">      <span class="comment">//掩码值</span></span><br><span class="line">      uchar mask= <span class="number">0xFF</span>&lt;&lt;n; <span class="comment">// e.g.比如div=16, mask= 0xF0</span></span><br><span class="line">              </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nl; j++) &#123;</span><br><span class="line"></span><br><span class="line">          uchar* data= result.ptr&lt;uchar&gt;(j);</span><br><span class="line">          <span class="keyword">const</span> uchar* idata= image.ptr&lt;uchar&gt;(j);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nc; i++) &#123;</span><br><span class="line">            <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line">                 </span><br><span class="line">            *data++= (*idata++)&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">            *data++= (*idata++)&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">            *data++= (*idata++)&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">          &#125; <span class="comment">//单行处理结束                   </span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------------------【方法十四】-------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用操作符重载</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce13</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">int</span> n= <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="built_in">log</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(div))/<span class="built_in">log</span>(<span class="number">2.0</span>));</span><br><span class="line">      <span class="comment">//掩码值</span></span><br><span class="line">      uchar mask= <span class="number">0xFF</span>&lt;&lt;n; <span class="comment">// e.g. 比如div=16, mask= 0xF0</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//进行色彩还原</span></span><br><span class="line">      image=(image&amp;Scalar(mask,mask,mask))+Scalar(div/<span class="number">2</span>,div/<span class="number">2</span>,div/<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------------------------【main( )函数】--------------------------------------------</span></span><br><span class="line"><span class="comment">//        描述：控制台应用程序的入口函数，我们的程序从这里开始</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    int64 t[NTESTS],tinit;</span><br><span class="line">    Mat image0;</span><br><span class="line">    Mat image1;</span><br><span class="line">    Mat image2;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">"color 4F"</span>);</span><br><span class="line"></span><br><span class="line">    image0= imread(<span class="string">"1.png"</span>);</span><br><span class="line">    <span class="keyword">if</span> (!image0.data)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//时间值设为0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;NTESTS; i++)</span><br><span class="line">        t[i]= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 多次重复测试</span></span><br><span class="line">    <span class="keyword">int</span> n=NITERATIONS;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;n; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; k &lt;&lt; <span class="string">" of "</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        <span class="comment">//【方法一】利用.ptr 和 []</span></span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce0(image1);</span><br><span class="line">        t[<span class="number">0</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法二】利用 .ptr 和 * ++</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce1(image1);</span><br><span class="line">        t[<span class="number">1</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法三】利用.ptr 和 * ++ 以及模操作</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce2(image1);</span><br><span class="line">        t[<span class="number">2</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法四】 利用.ptr 和 * ++ 以及位操作</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce3(image1);</span><br><span class="line">        t[<span class="number">3</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法五】 利用指针的算术运算</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce4(image1);</span><br><span class="line">        t[<span class="number">4</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法六】利用 .ptr 和 * ++以及位运算、image.cols * image.channels()</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce5(image1);</span><br><span class="line">        t[<span class="number">5</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法七】利用.ptr 和 * ++ 以及位运算(continuous)</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce6(image1);</span><br><span class="line">        t[<span class="number">6</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法八】利用 .ptr 和 * ++ 以及位运算 (continuous+channels)</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce7(image1);</span><br><span class="line">        t[<span class="number">7</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法九】 利用Mat_ iterator</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce8(image1);</span><br><span class="line">        t[<span class="number">8</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法十】 利用Mat_ iterator以及位运算</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce9(image1);</span><br><span class="line">        t[<span class="number">9</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法十一】利用Mat Iterator_</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce10(image1);</span><br><span class="line">        t[<span class="number">10</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法十二】 利用动态地址计算配合at</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce11(image1);</span><br><span class="line">        t[<span class="number">11</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法十三】 利用图像的输入与输出</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        Mat result;</span><br><span class="line">        colorReduce12(image1, result);</span><br><span class="line">        t[<span class="number">12</span>]+= getTickCount()-tinit;</span><br><span class="line">        image2= result;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//【方法十四】 利用操作符重载</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce13(image1);</span><br><span class="line">        t[<span class="number">13</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//------------------------------</span></span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">//输出图像   </span></span><br><span class="line">    imshow(<span class="string">"原始图像"</span>,image0);</span><br><span class="line">    imshow(<span class="string">"结果"</span>,image2);</span><br><span class="line">    imshow(<span class="string">"图像结果"</span>,image1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出平均执行时间</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"-------------------------------------------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法一】利用.ptr 和 []的方法所用时间为 "</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">0</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法二】利用 .ptr 和 * ++ 的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">1</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法三】利用.ptr 和 * ++ 以及模操作的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">2</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法四】利用.ptr 和 * ++ 以及位操作的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">3</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法五】利用指针算术运算的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">4</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法六】利用 .ptr 和 * ++以及位运算、channels()的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">5</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法七】利用.ptr 和 * ++ 以及位运算(continuous)的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">6</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法八】利用 .ptr 和 * ++ 以及位运算 (continuous+channels)的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">7</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法九】利用Mat_ iterator 的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">8</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法十】利用Mat_ iterator以及位运算的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">9</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法十一】利用Mat Iterator_的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">10</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法十二】利用动态地址计算配合at 的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">11</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法十三】利用图像的输入与输出的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">12</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法十四】利用操作符重载的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">13</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;    </span><br><span class="line">    </span><br><span class="line">    waitKey();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    OpenCV是我研途中重点打交道的工具库。教研室流传下来的图像处理程序都是基于OpenCV1的code，那更底层，更多指针与结构体。而如今OpenCV4都已经更新了，C++强调接口的实用是大势所趋，用到什么去看相关的函数即可。这半年的学习让我深刻体会到线性学习的弊
      
    
    </summary>
    
      <category term="OpenCV" scheme="http://yoursite.com/categories/OpenCV/"/>
    
    
      <category term="OpenCV" scheme="http://yoursite.com/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>机器视觉在晶振外壳缺陷检测中的应用</title>
    <link href="http://yoursite.com/2019/02/01/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E5%9C%A8%E6%99%B6%E6%8C%AF%E5%A4%96%E5%A3%B3%E7%BC%BA%E9%99%B7%E6%A3%80%E6%B5%8B%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2019/02/01/机器视觉在晶振外壳缺陷检测中的应用/</id>
    <published>2019-02-01T08:28:09.000Z</published>
    <updated>2019-02-01T08:55:28.242Z</updated>
    
    <content type="html"><![CDATA[<p><strong>参考文献：</strong></p><p><code>庞章炯,张 鹰,谢佩军,计时鸣. 机器视觉在晶振外壳缺陷检测中的应用</code></p><ul><li><p>晶振外壳：微型冲压件，内底 侧面 缺陷较大</p></li><li><p><strong>图像处理</strong>：边缘检测、数学形态学、拓扑描述</p></li></ul><p><strong>机器视觉在制造业上分为：</strong></p><ol><li>基于产品特征的检测：空间特征、表面品质特征、结构特征</li><li>机器人</li></ol><p>==对于大曲率的金属物件表面检测，最理想的方案是 使用同轴照明==</p><p><strong>重要公式</strong>：</p><p><img src="http://i1.bvimg.com/675947/5a07ba4319f4beaa.png" alt="RGB到HSV转换公式"></p><p>高亮反射区产生的光斑常与其他高亮区域相连，因此需利用数学形态学的相关操作</p><p>形态学可以用来简化图像数据，保持图像的基本形状特性，同时去掉图像中与研究目的无关的部分</p><p>数学形态学：集合论</p><p>膨胀  腐蚀  开启   闭合</p><p>通常给出一个图像集合和一个结构元素集合，利用结构元素对图像进行操作</p><p>拓扑学(topology)</p><p>研究 图形不受畸变变形影响的性质 。</p><p>对于一个 给定平面区域来说 ，区域内的孔数H和区域内的连通组元个数 c 都是常用的拓扑性质</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;参考文献：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;庞章炯,张 鹰,谢佩军,计时鸣. 机器视觉在晶振外壳缺陷检测中的应用&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;晶振外壳：微型冲压件，内底 侧面 缺陷较大&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;str
      
    
    </summary>
    
      <category term="Paper Summary" scheme="http://yoursite.com/categories/Paper-Summary/"/>
    
    
      <category term="机器视觉" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
      <category term="晶振" scheme="http://yoursite.com/tags/%E6%99%B6%E6%8C%AF/"/>
    
      <category term="图像处理" scheme="http://yoursite.com/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>一款类似于mac-dock栏的windows软件</title>
    <link href="http://yoursite.com/2019/01/28/%E4%B8%80%E6%AC%BE%E7%B1%BB%E4%BC%BC%E4%BA%8Emac-dock%E6%A0%8F%E7%9A%84windows%E8%BD%AF%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/01/28/一款类似于mac-dock栏的windows软件/</id>
    <published>2019-01-28T08:41:17.000Z</published>
    <updated>2019-02-01T08:19:17.729Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接：一款类似于mac-dock栏的windows软件</p><h3 id="一款类似于mac-dock栏的windows软件"><a href="#一款类似于mac-dock栏的windows软件" class="headerlink" title="一款类似于mac-dock栏的windows软件"></a>一款类似于mac-dock栏的windows软件</h3><p><img src="https://img-blog.csdnimg.cn/20190129134203464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZseV93dA==,size_16,color_FFFFFF,t_70" alt="软件截图"><br>软件名称叫 <code>Winstep Nexus Ultimate</code></p><p>软件链接如下：</p><p>链接：<a href="https://www.lanzous.com/i1xnevc" target="_blank" rel="noopener">https://www.lanzous.com/i1xnevc</a>    密码:5vsy</p><h4 id="安装破解方法"><a href="#安装破解方法" class="headerlink" title="安装破解方法"></a>安装破解方法</h4><ol><li>下载安装Winstep Nexus，安装完成后不要启动</li><li>以管理员权限运行Activation.exe，将其安装到Winstep Nexus默认目录中</li><li>启动Winstep Nexus，输入任意用户名和密钥注册</li><li>重启Winstep Nexus即为激活版</li></ol><p>注：不能更新，如果更新，可重新执2-4步  </p><h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h4><p><img src="https://img-blog.csdnimg.cn/20190129134247913.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZseV93dA==,size_16,color_FFFFFF,t_70" alt="我的桌面"><br>这是我的桌面，软件的主题有很多，挑自己喜欢的风格和颜色即可。</p><blockquote><p>每天写点东西，让坚持变成习惯!</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文链接：一款类似于mac-dock栏的windows软件&lt;/p&gt;
&lt;h3 id=&quot;一款类似于mac-dock栏的windows软件&quot;&gt;&lt;a href=&quot;#一款类似于mac-dock栏的windows软件&quot; class=&quot;headerlink&quot; title=&quot;一款类似于ma
      
    
    </summary>
    
      <category term="黑科技" scheme="http://yoursite.com/categories/%E9%BB%91%E7%A7%91%E6%8A%80/"/>
    
    
      <category term="黑科技" scheme="http://yoursite.com/tags/%E9%BB%91%E7%A7%91%E6%8A%80/"/>
    
  </entry>
  
  <entry>
    <title>误差补偿模型</title>
    <link href="http://yoursite.com/2019/01/28/%E8%AF%AF%E5%B7%AE%E8%A1%A5%E5%81%BF%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2019/01/28/误差补偿模型/</id>
    <published>2019-01-28T08:41:17.000Z</published>
    <updated>2019-02-01T09:29:00.462Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>就像来自遥远宇宙的一束光，不知道它从哪里来，也不知道它到哪里去，从我们头上掠过，波澜不惊。</p><h3 id="误差来源"><a href="#误差来源" class="headerlink" title="误差来源"></a>误差来源</h3><p>视觉测量误差主要来源有：图像采集误差，相机安装误差，运动平台误差。其中高精度的CCD传感器与图像采集卡的误差微乎其微可以忽略；相机坐标系如果与水平面不共面或共面但是存在夹角都会引入误差；三维运动平台的几何误差的垂直度问题将导致图像处理中的圆心提取和图像拼接，误差需要补偿。</p><h3 id="坐标系转换"><a href="#坐标系转换" class="headerlink" title="坐标系转换"></a>坐标系转换</h3><p><img src="https://img-blog.csdnimg.cn/20181122134704175.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZseV93dA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol><li>图像坐标系<br><img src="https://img-blog.csdnimg.cn/20181122141206254.png" alt="在这里插入图片描述"><br>图像坐标系建立在CCD传感器的面上如上图。</li><li>视觉坐标系<br><img src="https://img-blog.csdnimg.cn/20181122141220479.png" alt="在这里插入图片描述"></li><li>装配作业坐标系<br>与视觉坐标系建系相同<br><img src="https://img-blog.csdnimg.cn/20181122141449212.png" alt="在这里插入图片描述"></li><li>世界坐标系<br>世界坐标系是空间绝对坐标系，选取视觉坐标为世界坐标系即可</li></ol></blockquote><h3 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h3><p>各坐标系的空间位置如图所示，三维运动平台中X轴和Y轴滑台不垂直，YV0和YC0为实际的Y轴滑台运动方向。图像坐标系UOV与世界坐标系XWOYW之间的夹角为θ，以世界坐标系XW轴为基准，图像U轴向世界坐标系Y轴正方向偏转为正，反之为负。视觉测量模块三维运动平台X轴与YV0轴滑台之间的夹角为α。世界坐标系和装配作业坐标系XCOYC之间的夹角为φ，以世界坐标系X轴为基准，装配作业坐标系X轴向世界坐标系Y轴正方向偏转为正，反之为负。装配作业模块三维运动平台X轴与YC0轴滑台之间夹角为β。<br><img src="https://img-blog.csdnimg.cn/20190113194541759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZseV93dA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>根据坐标系之间的坐标转换关系建立误差补偿模型，以图像中一点为例，分别将其从图像坐标系装换到世界坐标系和装配作业坐标系中。<br>首先完成由图像坐标系向世界坐标系的转换，设图像中一点（u，v），其在世界坐标系中的坐标为（x，y），由于图像坐标系单位为像素，世界坐标系单位为微米，单位转换关系为：</p><script type="math/tex; mode=display">P=\begin{cases} ​        u_0=u \times S_x\\ ​        v_0=v \times S_y​    \end{cases} \tag{1}​</script><p>相应的矩阵形式$M_s$为：</p><script type="math/tex; mode=display">M_s= \begin{bmatrix}   S_x & 0 & 0 \\   0& S_y & 0 \\  0 & 0 & 1  \end{bmatrix} \tag{2}</script><p>图像坐标系和世界坐标系坐标轴之间存在夹角θ，需对图像坐标系进行旋转，旋转矩阵$M_R$为：</p><script type="math/tex; mode=display">M_R= \begin{bmatrix}  cos\theta & -sin\theta & 0 \\  sin\theta& cos\theta& 0 \\  0 & 0 & 1  \end{bmatrix} \tag{3}</script><p>采集过程中相机会变换采集位置，应该对图像坐标系原点和世界坐标系原点之间的距离进行补偿，需要进行平移变换，相应的平移变换矩阵$M_T$为：</p><script type="math/tex; mode=display">M_T= \begin{bmatrix}  1 & 0 & D_x \\ 0& 1& D_y\\  0 & 0 & 1  \end{bmatrix} \tag{4}</script><p>图像坐标系原点在世界坐标系中的坐标值（Dx，Dy）无法直接获取，从图5.4可知，相机在三维运动平台中XY向滑台位移分别为dx和dy，经计算得出此时相机在世界坐标系的坐标（Dx，Dy），计算公式为：</p><script type="math/tex; mode=display">\begin{cases}         D_x=d_x-d_y \times sin(\alpha-90^o)\\         D_y=d_y \times cos(\alpha-90^o)    \end{cases} \tag{5}</script><p>图像中一点（u，v）转换为世界坐标系一点（x，y）的误差补偿模型表达式为：</p><script type="math/tex; mode=display"> \begin{bmatrix}  x \\ y\\  1  \end{bmatrix} =   \begin{bmatrix}  1&0&d_x-d_y \times sin(\alpha-90^o)\\ 0& 1& d_y \times cos(\alpha-90^o)\\  0&0&1  \end{bmatrix}    \begin{bmatrix}  cos\theta & -sin\theta & 0 \\  sin\theta& cos\theta& 0 \\  0 & 0 & 1  \end{bmatrix}   \begin{bmatrix}   S_x & 0 & 0 \\   0& S_y & 0 \\  0 & 0 & 1  \end{bmatrix}    \begin{bmatrix}  u\\v\\  1  \end{bmatrix} \tag{6}</script><p>得到零件在世界坐标系中的坐标后，装配作业模块夹持壳体完成对正。由于世界坐标系和装配作业坐标系之间存在夹角，并且装配作业模块XY滑台不垂直，需要进行误差补偿。<br>装配过程仅需获取两个零件圆心的相对位置，不要求零件的绝对位置。可直接建立相对位置转换的误差补偿模型。设两零件在世界坐标系中的距离为（ΔX，ΔY），转换到装配作业坐标系后坐标为（ΔXC，ΔYC）。<br>首先对世界坐标系进行旋转补偿夹角φ，旋转矩阵$M_R$为：</p><script type="math/tex; mode=display">M_R=   \begin{bmatrix}  cos\varphi & sin\varphi & 0\\  -sin\varphi & cos\varphi & 0\\0 & 0& 1  \end{bmatrix} \tag{7}</script><p>旋转变换之后得到两个圆心在装配作业坐标系中的坐标差，由于装配作业模块XY向滑台不垂直，需要计算出XY滑台应该补偿的实际距离，转换矩阵$M_D$为：</p><script type="math/tex; mode=display">M_D=\begin{bmatrix}1 & tan(\beta-90^o) & 0\\0 & sec(\beta-90^o) & 0 \\0 & 0 &1\end{bmatrix} \tag{8}</script><p>零件圆心世界坐标系中的坐标差转换到装配作业坐标系中，并计算出实际的XY滑台补偿位移量（ΔXC0，ΔYC0）误差补偿模型的矩阵表达式为：</p><script type="math/tex; mode=display"> \begin{bmatrix}  \Delta X_{CO} \\   \Delta Y_{CO} \\  1  \end{bmatrix} =   \begin{bmatrix}1 & tan(\beta-90^o) & 0\\0 & sec(\beta-90^o) & 0 \\0 & 0 &1\end{bmatrix}   \begin{bmatrix}  cos\varphi & sin\varphi & 0\\  -sin\varphi & cos\varphi & 0\\0 & 0& 1  \end{bmatrix}   \begin{bmatrix}  \Delta X\\   \Delta Y\\  1  \end{bmatrix} \tag{9}</script><p>终于敲完了，latex确实很好用，矩阵书写很方便，坚持用Markdown来写博客！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;就像来自遥远宇宙的一束光，不知道它从哪里来，也不知道它到哪里去，从我们头上掠过，波澜不惊。&lt;/p&gt;
&lt;h3 id=&quot;误差来源&quot;&gt;&lt;a href=&quot;#误差来源&quot; class=&quot;headerlink&quot; title=&quot;误差来源&quot;&gt;&lt;/a&gt;误差来源&lt;/h3
      
    
    </summary>
    
      <category term="Computer Vision" scheme="http://yoursite.com/categories/Computer-Vision/"/>
    
    
      <category term="坐标转换" scheme="http://yoursite.com/tags/%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/"/>
    
      <category term="camera calibrate" scheme="http://yoursite.com/tags/camera-calibrate/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="http://yoursite.com/2019/01/27/hello-world/"/>
    <id>http://yoursite.com/2019/01/27/hello-world/</id>
    <published>2019-01-26T16:00:00.000Z</published>
    <updated>2019-01-29T05:25:15.170Z</updated>
    
    <content type="html"><![CDATA[<p>终于搭建成功了个人网站，愿君乘风破浪，不枉满腔赤诚！</p><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>生成一篇新的博客，然后选用一款<code>markdown</code>编辑器进行编辑即可</p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><p>这条语句经常用来本地测试博客的更改情况和效果。</p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>生成文件</p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>部署到服务器</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;终于搭建成功了个人网站，愿君乘风破浪，不枉满腔赤诚！&lt;/p&gt;
&lt;h2 id=&quot;常用操作&quot;&gt;&lt;a href=&quot;#常用操作&quot; class=&quot;headerlink&quot; title=&quot;常用操作&quot;&gt;&lt;/a&gt;常用操作&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a h
      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
