<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Thomas&#39;s Blog</title>
  
  <subtitle>王韬</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-15T00:31:44.623Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>孤岛violet</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>图像分类2</title>
    <link href="http://yoursite.com/2019/03/15/%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB2/"/>
    <id>http://yoursite.com/2019/03/15/图像分类2/</id>
    <published>2019-03-15T00:30:05.000Z</published>
    <updated>2019-03-15T00:31:44.623Z</updated>
    
    <content type="html"><![CDATA[<p>交叉验证:适用于小数据集,深度学习不适用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;交叉验证:适用于小数据集,深度学习不适用&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>图像分类1</title>
    <link href="http://yoursite.com/2019/03/13/%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB1/"/>
    <id>http://yoursite.com/2019/03/13/图像分类1/</id>
    <published>2019-03-13T13:08:39.000Z</published>
    <updated>2019-03-14T06:23:45.612Z</updated>
    
    <content type="html"><![CDATA[<p><strong>内容列表</strong>：</p><ul><li>图像分类、数据驱动方法和流程</li><li>Nearest Neighbor分类器</li><li><ul><li>k-Nearest Neighbor</li></ul></li><li>验证集、交叉验证集和超参数调参</li><li>Nearest Neighbor的优劣</li><li>小结</li><li>小结：应用kNN实践</li><li>拓展阅读</li></ul><h2 id="图像分类"><a class="markdownIt-Anchor" href="#图像分类"></a> 图像分类</h2><p><strong>目标</strong>：这一节我们将介绍图像分类问题。所谓图像分类问题，就是已有固定的分类标签集合，然后对于输入的图像，从分类标签集合中找出一个分类标签，最后把分类标签分配给该输入图像。虽然看起来挺简单的，但这可是计算机视觉领域的核心问题之一，并且有着各种各样的实际应用。在后面的课程中，我们可以看到计算机视觉领域中很多看似不同的问题（比如物体检测和分割），都可以被归结为图像分类问题。</p><p><strong>例子</strong>：以下图为例，图像分类模型读取该图片，并生成该图片属于集合 {cat, dog, hat, mug}中各个标签的概率。需要注意的是，对于计算机来说，图像是一个由数字组成的巨大的3维数组。在这个例子中，猫的图像大小是宽248像素，高400像素，有3个颜色通道，分别是红、绿和蓝（简称RGB）。如此，该图像就包含了248X400X3=297600个数字，每个数字都是在范围0-255之间的整型，其中0表示全黑，255表示全白。我们的任务就是把这些上百万的数字变成一个简单的标签，比如“猫”。</p><p><img src="https://s2.ax1x.com/2019/03/13/AksW4g.png" alt="AksW4g.png"></p><p>图像分类的任务，就是对于一个给定的图像，预测它属于的那个分类标签（或者给出属于一系列不同标签的可能性）。图像是3维数组，数组元素是取值范围从0到255的整数。数组的尺寸是宽度x高度x3，其中这个3代表的是红、绿和蓝3个颜色通道。</p><p><strong>困难和挑战</strong>：对于人来说，识别出一个像“猫”一样视觉概念是简单至极的，然而从计算机视觉算法的角度来看就值得深思了。我们在下面列举了计算机视觉算法在图像识别方面遇到的一些困难，要记住图像是以3维数组来表示的，数组中的元素是亮度值。</p><ul><li><strong>视角变化（Viewpoint variation）</strong>：同一个物体，摄像机可以从多个角度来展现。</li><li><strong>大小变化（Scale variation）</strong>：物体可视的大小通常是会变化的（不仅是在图片中，在真实世界中大小也是变化的）。</li><li><strong>形变（Deformation）</strong>：很多东西的形状并非一成不变，会有很大变化。</li><li><strong>遮挡（Occlusion）</strong>：目标物体可能被挡住。有时候只有物体的一小部分（可以小到几个像素）是可见的。</li><li><strong>光照条件（Illumination conditions）</strong>：在像素层面上，光照的影响非常大。</li><li><strong>背景干扰（Background clutter）</strong>：物体可能混入背景之中，使之难以被辨认。</li><li><strong>类内差异（Intra-class variation）</strong>：一类物体的个体之间的外形差异很大，比如椅子。这一类物体有许多不同的对象，每个都有自己的外形。</li></ul><p>面对以上所有变化及其组合，好的图像分类模型能够在维持分类结论稳定的同时，保持对类间差异足够敏感。</p><p><strong>数据驱动方法</strong>：如何写一个图像分类的算法呢？这和写个排序算法可是大不一样。怎么写一个从图像中认出猫的算法？搞不清楚。因此，与其在代码中直接写明各类物体到底看起来是什么样的，倒不如说我们采取的方法和教小孩儿看图识物类似：给计算机很多数据，然后实现学习算法，让计算机学习到每个类的外形。这种方法，就是<em>数据驱动方法</em>。既然该方法的第一步就是收集已经做好分类标注的图片来作为训练集，那么下面就看看数据库到底长什么样：</p><p>一个有4个视觉分类的训练集。在实际中，我们可能有上千的分类，每个分类都有成千上万的图像。</p><p><strong>图像分类流程</strong>。在课程视频中已经学习过，<strong>图像分类</strong>就是输入一个元素为像素值的数组，然后给它分配一个分类标签。完整流程如下：</p><ul><li><strong>输入</strong>：输入是包含N个图像的集合，每个图像的标签是K种分类标签中的一种。这个集合称为<em>训练集。</em></li><li><strong>学习</strong>：这一步的任务是使用训练集来学习每个类到底长什么样。一般该步骤叫做<em>训练分类器</em>或者<em>学习一个模型</em>。</li><li><strong>评价</strong>：让分类器来预测它未曾见过的图像的分类标签，并以此来评价分类器的质量。我们会把分类器预测的标签和图像真正的分类标签对比。毫无疑问，分类器预测的分类标签和图像真正的分类标签如果一致，那就是好事，这样的情况越多越好。</li></ul><h2 id="nearest-neighbor分类器"><a class="markdownIt-Anchor" href="#nearest-neighbor分类器"></a> Nearest Neighbor分类器</h2><p>作为课程介绍的第一个方法，我们来实现一个<strong>Nearest Neighbor分类器</strong>。虽然这个分类器和卷积神经网络没有任何关系，实际中也极少使用，但通过实现它，可以让读者对于解决图像分类问题的方法有个基本的认识。</p><p>**图像分类数据集：CIFAR-10。**一个非常流行的图像分类数据集是<a href="http://www.cs.toronto.edu/~kriz/cifar.html" target="_blank" rel="noopener">CIFAR-10</a>。这个数据集包含了60000张32X32的小图像。每张图像都有10种分类标签中的一种。这60000张图像被分为包含50000张图像的训练集和包含10000张图像的测试集。</p><p><img src="https://s2.ax1x.com/2019/03/14/AA3CCT.png" alt="AA3CCT.png"></p><p><strong>左边</strong>：从<a href="http://www.cs.toronto.edu/~kriz/cifar.html" target="_blank" rel="noopener">CIFAR-10</a>数据库来的样本图像。</p><p><strong>右边</strong>：第一列是测试图像，然后第一列的每个测试图像右边是使用Nearest Neighbor算法，根据像素差异，从训练集中选出的10张最类似的图片。</p><p>假设现在我们有CIFAR-10的50000张图片（每种分类5000张）作为训练集，我们希望将余下的10000作为测试集并给他们打上标签。Nearest Neighbor算法将会拿着测试图片和训练集中每一张图片去比较，然后将它认为最相似的那个训练集图片的标签赋给这张测试图片。上面右边的图片就展示了这样的结果。请注意上面10个分类中，只有3个是准确的。比如第8行中，马头被分类为一个红色的跑车，原因在于红色跑车的黑色背景非常强烈，所以这匹马就被错误分类为跑车了。</p><p>那么具体如何比较两张图片呢？在本例中，就是比较32x32x3的像素块。最简单的方法就是逐个像素比较，最后将差异值全部加起来。换句话说，就是将两张图片先转化为两个向量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">I_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">I_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,然后计算他们的<strong>L1距离：</strong></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mn>1</mn></msub><mo>(</mo><msub><mi>I</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>I</mi><mn>2</mn></msub><mo>)</mo><mo>=</mo><munder><mo>∑</mo><mi>p</mi></munder><mi mathvariant="normal">∣</mi><msubsup><mi>I</mi><mn>1</mn><mi>p</mi></msubsup><mo>−</mo><msubsup><mi>I</mi><mn>2</mn><mi>p</mi></msubsup><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">d_1(I_1,I_2) = \sum_{p}|I_1^p-I_2^p|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.4361180000000004em;vertical-align:-1.386113em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0500050000000003em;"><span style="top:-1.8999949999999999em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.386113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7822999999999999em;"><span style="top:-2.433692em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.180908em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0486079999999998em;vertical-align:-0.266308em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7822999999999999em;"><span style="top:-2.433692em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.180908em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span><span class="mord">∣</span></span></span></span></span></p><p>这里的求和是针对所有的像素。下面是整个比较流程的图例：</p><p><img src="https://s2.ax1x.com/2019/03/14/AA38rd.png" alt="AA38rd.png"></p><p>以图片中的一个颜色通道为例来进行说明。两张图片使用L1距离来进行比较。逐个像素求差值，然后将所有差值加起来得到一个数值。如果两张图片一模一样，那么L1距离为0，但是如果两张图片很是不同，那L1值将会非常大。</p><h3 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h3><p>下面，让我们看看如何用代码来实现这个分类器。首先，我们将CIFAR-10的数据加载到内存中，并分成4个数组：训练数据和标签，测试数据和标签。在下面的代码中，<strong>Xtr</strong>（大小是50000x32x32x3）存有训练集中所有的图像，<strong>Ytr</strong>是对应的长度为50000的1维数组，存有图像对应的分类标签（从0到9）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Xtr, Ytr, Xte, Yte = load_CIFAR10(<span class="string">'data/cifar10/'</span>) <span class="comment"># a magic function we provide</span></span><br><span class="line"><span class="comment"># flatten out all images to be one-dimensional</span></span><br><span class="line">Xtr_rows = Xtr.reshape(Xtr.shape[<span class="number">0</span>], <span class="number">32</span> * <span class="number">32</span> * <span class="number">3</span>) <span class="comment"># Xtr_rows becomes 50000 x 3072</span></span><br><span class="line">Xte_rows = Xte.reshape(Xte.shape[<span class="number">0</span>], <span class="number">32</span> * <span class="number">32</span> * <span class="number">3</span>) <span class="comment"># Xte_rows becomes 10000 x 3072</span></span><br></pre></td></tr></table></figure><p>现在我们得到所有的图像数据，并且把他们拉长成为行向量了。接下来展示如何训练并评价一个分类器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nn = NearestNeighbor() <span class="comment"># create a Nearest Neighbor classifier class</span></span><br><span class="line">nn.train(Xtr_rows, Ytr) <span class="comment"># train the classifier on the training images and labels</span></span><br><span class="line">Yte_predict = nn.predict(Xte_rows) <span class="comment"># predict labels on the test images</span></span><br><span class="line"><span class="comment"># and now print the classification accuracy, which is the average number</span></span><br><span class="line"><span class="comment"># of examples that are correctly predicted (i.e. label matches)</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'accuracy: %f'</span> % ( np.mean(Yte_predict == Yte) ))</span><br></pre></td></tr></table></figure><p>作为评价标准，我们常常使用<strong>准确率</strong>，它描述了我们预测正确的得分。请注意以后我们实现的所有分类器都需要有这个API：**train(X, y)<strong>函数。该函数使用训练集的数据和标签来进行训练。从其内部来看，类应该实现一些关于标签和标签如何被预测的模型。这里还有个</strong>predict(X)**函数，它的作用是预测输入的新数据的分类标签。现在还没介绍分类器的实现，下面就是使用L1距离的Nearest Neighbor分类器的实现套路：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NearestNeighbor</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(self, X, y)</span>:</span></span><br><span class="line">    <span class="string">""" X is N x D where each row is an example. Y is 1-dimension of size N """</span></span><br><span class="line">    <span class="comment"># the nearest neighbor classifier simply remembers all the training data</span></span><br><span class="line">    self.Xtr = X</span><br><span class="line">    self.ytr = y</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self, X)</span>:</span></span><br><span class="line">    <span class="string">""" X is N x D where each row is an example we wish to predict label for """</span></span><br><span class="line">num_test = X.shape[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># lets make sure that the output type matches the input type</span></span><br><span class="line">Ypred = np.zeros(num_test, dtype = self.ytr.dtype)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># loop over all test rows</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(num_test):</span><br><span class="line">      <span class="comment"># find the nearest training image to the i'th test image</span></span><br><span class="line">      <span class="comment"># using the L1 distance (sum of absolute value differences)</span></span><br><span class="line">distances = np.sum(np.abs(self.Xtr - X[i,:]), axis = <span class="number">1</span>)</span><br><span class="line">min_index = np.argmin(distances) <span class="comment"># get the index with smallest distance</span></span><br><span class="line">Ypred[i] = self.ytr[min_index] <span class="comment"># predict the label of the nearest example</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Ypred</span><br></pre></td></tr></table></figure><p>如果你用这段代码跑CIFAR-10，你会发现准确率能达到<strong>38.6%</strong>。这比随机猜测的10%要好，但是比人类识别的水平（<a href="http://karpathy.github.io/2011/04/27/manually-classifying-cifar10/" target="_blank" rel="noopener">据研究推测是94%</a>）和卷积神经网络能达到的95%还是差多了。点击查看基于CIFAR-10数据的<a href="http://www.kaggle.com/c/cifar-10/leaderboard" target="_blank" rel="noopener">Kaggle算法竞赛排行榜</a>。</p><p><strong>距离选择</strong>：计算向量间的距离有很多种方法，另一个常用的方法是<strong>L2距离</strong>，从几何学的角度，可以理解为它在计算两个向量间的欧式距离。L2距离的公式如下：</p><p>​                                               <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mn>2</mn></msub><mo>(</mo><msub><mi>I</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>I</mi><mn>2</mn></msub><mo>)</mo><mo>=</mo><msqrt><mrow><msub><mo>∑</mo><mi>p</mi></msub><mo>(</mo><msubsup><mi>I</mi><mn>1</mn><mi>p</mi></msubsup><mo>−</mo><msubsup><mi>I</mi><mn>2</mn><mi>p</mi></msubsup><msup><mo>)</mo><mn>2</mn></msup></mrow></msqrt></mrow><annotation encoding="application/x-tex">d_2(I_1,I_2) = \sqrt{\sum_p(I_1^p-I_2^p)^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.84em;vertical-align:-0.681759em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.158241em;"><span class="svg-align" style="top:-3.8em;"><span class="pstrut" style="height:3.8em;"></span><span class="mord" style="padding-left:1em;"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.0016819999999999613em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7823em;"><span style="top:-2.433692em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.1809080000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7823em;"><span style="top:-2.433692em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.1809080000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.118241em;"><span class="pstrut" style="height:3.8em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.8800000000000001em;"><svg width="400em" height="1.8800000000000001em" viewbox="0 0 400000 1944" preserveaspectratio="xMinYMin slice"><path d="M1001,80H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5c4,-6.7,10,-10,18,-10zM1001 80H400000v40H1013z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.681759em;"><span></span></span></span></span></span></span></span></span></p><p>换句话说，我们依旧是在计算像素间的差值，只是先求其平方，然后把这些平方全部加起来，最后对这个和开方。在Numpy中，我们只需要替换上面代码中的1行代码就行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">distances = np.sqrt(np.sum(np.square(self.Xtr - X[i,:]), axis = <span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>注意在这里使用了<strong>np.sqrt</strong>，但是在实际中可能不用。因为求平方根函数是一个<em>单调函数</em>，它对不同距离的绝对值求平方根虽然改变了数值大小，但依然保持了不同距离大小的顺序。所以用不用它，都能够对像素差异的大小进行正确比较。如果你在CIFAR-10上面跑这个模型，正确率是<strong>35.4%</strong>，比刚才低了一点。</p><p><strong>L1和L2比较</strong>。比较这两个度量方式是挺有意思的。在面对两个向量之间的差异时，L2比L1更加不能容忍这些差异。也就是说，相对于1个巨大的差异，L2距离更倾向于接受多个中等程度的差异。L1和L2都是在<a href="http://planetmath.org/vectorpnorm" target="_blank" rel="noopener">p-norm</a>常用的特殊形式。</p><h2 id="k-nearest-neighbor分类器"><a class="markdownIt-Anchor" href="#k-nearest-neighbor分类器"></a> k-Nearest Neighbor分类器</h2><p>你可能注意到了，为什么只用最相似的1张图片的标签来作为测试图像的标签呢？这不是很奇怪吗！是的，使用<strong>k-Nearest Neighbor分类器</strong>就能做得更好。它的思想很简单：与其只找最相近的那1个图片的标签，我们找最相似的k个图片的标签，然后让他们针对测试图片进行投票，最后把票数最高的标签作为对测试图片的预测。所以当k=1的时候，k-Nearest Neighbor分类器就是Nearest Neighbor分类器。从直观感受上就可以看到，更高的k值可以让分类的效果更平滑，使得分类器对于异常值更有抵抗力。</p><p><img src="https://s2.ax1x.com/2019/03/14/AA3wRS.png" alt="AA3wRS.png"></p><p>上面示例展示了Nearest Neighbor分类器和5-Nearest Neighbor分类器的区别。例子使用了2维的点来表示，分成3类（红、蓝和绿）。不同颜色区域代表的是使用L2距离的分类器的<strong>决策边界</strong>。白色的区域是分类模糊的例子（即图像与两个以上的分类标签绑定）。需要注意的是，在NN分类器中，异常的数据点（比如：在蓝色区域中的绿点）制造出一个不正确预测的孤岛。5-NN分类器将这些不规则都平滑了，使得它针对测试数据的<strong>泛化</strong>（<strong>generalization</strong>）能力更好（例子中未展示）。注意，5-NN中也存在一些灰色区域，这些区域是因为近邻标签的最高票数相同导致的（比如：2个邻居是红色，2个邻居是蓝色，还有1个是绿色）。</p><p>由于最近邻算法训练快,而测试较慢,所以几乎不会用到这种算法,因为我们接受的是训练可以慢一点,但是测试要快.</p><p>在实际中，大多使用k-NN分类器。但是k值如何确定呢？接下来就讨论这个问题.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;内容列表&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;图像分类、数据驱动方法和流程&lt;/li&gt;
&lt;li&gt;Nearest Neighbor分类器&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;k-Nearest Neighbor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="Computer Vision" scheme="http://yoursite.com/categories/Computer-Vision/"/>
    
    
      <category term="cs231n" scheme="http://yoursite.com/tags/cs231n/"/>
    
      <category term="图像分类" scheme="http://yoursite.com/tags/%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>C-Standard-Library-architecure &amp; sources2</title>
    <link href="http://yoursite.com/2019/03/13/C-Standard-Library-architecure-sources2/"/>
    <id>http://yoursite.com/2019/03/13/C-Standard-Library-architecure-sources2/</id>
    <published>2019-03-13T11:27:45.000Z</published>
    <updated>2019-03-14T06:33:02.840Z</updated>
    
    <content type="html"><![CDATA[<h3 id="list容器链表"><a class="markdownIt-Anchor" href="#list容器链表"></a> list容器（链表）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt; //abort()</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;  //snprintf()</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; //find()</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt; </span></span></span><br><span class="line"><span class="keyword">namespace</span> jj03</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_list</span><span class="params">(<span class="keyword">long</span>&amp; value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\ntest_list().......... \n"</span>;</span><br><span class="line">     </span><br><span class="line"><span class="built_in">list</span>&lt;<span class="built_in">string</span>&gt; c;  </span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">clock_t</span> timeStart = clock();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">long</span> i=<span class="number">0</span>; i&lt; value; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">snprintf</span>(buf, <span class="number">10</span>, <span class="string">"%d"</span>, rand());</span><br><span class="line">        c.push_back(<span class="built_in">string</span>(buf));    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(exception&amp; p) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"i="</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span> &lt;&lt; p.what() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">abort</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"list.size()= "</span> &lt;&lt; c.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"list.max_size()= "</span> &lt;&lt; c.max_size() &lt;&lt; <span class="built_in">endl</span>;    <span class="comment">//357913941</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"list.front()= "</span> &lt;&lt; c.front() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"list.back()= "</span> &lt;&lt; c.back() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> target = get_a_target_string();</span><br><span class="line"><span class="comment">//-----------find----------------------</span></span><br><span class="line">    timeStart = clock();</span><br><span class="line"><span class="keyword">auto</span> pItem = find(c.begin(), c.end(), target);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"std::find(), milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (pItem != c.end())</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"found, "</span> &lt;&lt; *pItem &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"not found! "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//-----------sort----------------------    </span></span><br><span class="line">    timeStart = clock();</span><br><span class="line">c.sort();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"c.sort(), milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>;    </span><br><span class="line">    </span><br><span class="line">c.clear();</span><br><span class="line">test_moveable(<span class="built_in">list</span>&lt;MyString&gt;(),<span class="built_in">list</span>&lt;MyStrNoMove&gt;(), value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>一个萝卜一个坑</li><li>标准库有<kbd>sort</kbd>，容器自己也有一个<kbd>sort</kbd>,容器查找自然要用自己的sort</li></ul><h3 id="forward_list容器单向链表c11"><a class="markdownIt-Anchor" href="#forward_list容器单向链表c11"></a> forward_list容器——单向链表（c++11）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt; //abort()</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;  //snprintf()</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt; </span></span></span><br><span class="line"><span class="keyword">namespace</span> jj04</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_forward_list</span><span class="params">(<span class="keyword">long</span>&amp; value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\ntest_forward_list().......... \n"</span>;</span><br><span class="line">     </span><br><span class="line">forward_list&lt;<span class="built_in">string</span>&gt; c;  </span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">clock_t</span> timeStart = clock();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">long</span> i=<span class="number">0</span>; i&lt; value; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">snprintf</span>(buf, <span class="number">10</span>, <span class="string">"%d"</span>, rand());</span><br><span class="line">        c.push_front(<span class="built_in">string</span>(buf));     </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(exception&amp; p) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"i="</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span> &lt;&lt; p.what() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">abort</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"forward_list.max_size()= "</span> &lt;&lt; c.max_size() &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//536870911</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"forward_list.front()= "</span> &lt;&lt; c.front() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 找到最后一个元素非常慢</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> target = get_a_target_string();</span><br><span class="line">    timeStart = clock();</span><br><span class="line"><span class="keyword">auto</span> pItem = find(c.begin(), c.end(), target);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"std::find(), milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pItem != c.end())</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"found, "</span> &lt;&lt; *pItem &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"not found! "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    timeStart = clock();</span><br><span class="line">c.sort();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"c.sort(), milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">c.clear(); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>只有put_front( ) 没有put_back( )</li><li>单向链表找到最后一个元素非常慢</li><li>.size( )和.back( )都是不存在的</li></ul><h3 id="slist容器gnu非标准等价于forward_list"><a class="markdownIt-Anchor" href="#slist容器gnu非标准等价于forward_list"></a> slist容器（GNU，非标准）等价于forward_list</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ext\slist&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#inlcude <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> jj10</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test_slist</span><span class="params">(<span class="keyword">long</span>&amp; value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        __gnu_cxx::slist&lt;<span class="built_in">string</span>&gt; c;</span><br><span class="line">        <span class="keyword">char</span> buf[<span class="number">10</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">clock_t</span> timeStart = clock();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>;i&lt; value; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">snprintf</span>(buf, <span class="number">10</span>, <span class="string">"%d"</span>, rand());</span><br><span class="line">                c.put_front(<span class="built_in">string</span>(buf));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span>(exception&amp; p)</span><br><span class="line">            &#123;</span><br><span class="line">               <span class="built_in">cout</span> &lt;&lt; <span class="string">"i="</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span> &lt;&lt; p.what() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   <span class="built_in">abort</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="deque容器双端队列双向进出"><a class="markdownIt-Anchor" href="#deque容器双端队列双向进出"></a> deque容器——双端队列:双向进出</h3><p><img src="https://s2.ax1x.com/2019/03/13/AkBPh9.png" alt="AkBPh9.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt; //abort()</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;  //snprintf()</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt; </span></span></span><br><span class="line"><span class="keyword">namespace</span> jj05</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_deque</span><span class="params">(<span class="keyword">long</span>&amp; value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\ntest_deque().......... \n"</span>;</span><br><span class="line">     </span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="built_in">string</span>&gt; c;  </span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">clock_t</span> timeStart = clock();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">long</span> i=<span class="number">0</span>; i&lt; value; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">snprintf</span>(buf, <span class="number">10</span>, <span class="string">"%d"</span>, rand());</span><br><span class="line">        c.push_back(<span class="built_in">string</span>(buf));     </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(exception&amp; p) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"i="</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span> &lt;&lt; p.what() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">abort</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"deque.size()= "</span> &lt;&lt; c.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"deque.front()= "</span> &lt;&lt; c.front() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"deque.back()= "</span> &lt;&lt; c.back() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"deque.max_size()= "</span> &lt;&lt; c.max_size() &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//1073741821</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> target = get_a_target_string();</span><br><span class="line">    timeStart = clock();</span><br><span class="line"><span class="keyword">auto</span> pItem = find(c.begin(), c.end(), target);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"std::find(), milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pItem != c.end())</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"found, "</span> &lt;&lt; *pItem &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"not found! "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    timeStart = clock();</span><br><span class="line">sort(c.begin(), c.end());</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"sort(), milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">c.clear();</span><br><span class="line">test_moveable(<span class="built_in">deque</span>&lt;MyString&gt;(),<span class="built_in">deque</span>&lt;MyStrNoMove&gt;(), value); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关于stack和queue</strong></p><ul><li>stack栈（先进后出）和queue队列（先进先出）其实是deque的容器适配器，但是也可以称之为容器</li><li>都是<kbd>.push()</kbd></li><li>不提供iterator的操作，没有find算法，会破坏二者的特性</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;list容器链表&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#list容器链表&quot;&gt;&lt;/a&gt; list容器（链表）&lt;/h3&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="C++" scheme="http://yoursite.com/categories/C/"/>
    
    
      <category term="deque" scheme="http://yoursite.com/tags/deque/"/>
    
      <category term="list" scheme="http://yoursite.com/tags/list/"/>
    
      <category term="stack" scheme="http://yoursite.com/tags/stack/"/>
    
      <category term="forward_list" scheme="http://yoursite.com/tags/forward-list/"/>
    
  </entry>
  
  <entry>
    <title>C++ Standard Library--architecure &amp; sources1</title>
    <link href="http://yoursite.com/2019/03/12/C-Standard-Library-architecure-sources1/"/>
    <id>http://yoursite.com/2019/03/12/C-Standard-Library-architecure-sources1/</id>
    <published>2019-03-12T14:25:22.000Z</published>
    <updated>2019-03-15T01:02:50.193Z</updated>
    
    <content type="html"><![CDATA[<p>三月份开始复习<strong>泛型编程</strong>和<strong>STL</strong>的体系结构和内核分析,记录今天学的东西。</p><h3 id="1-c-standard-library-vs-standard-template-library"><a class="markdownIt-Anchor" href="#1-c-standard-library-vs-standard-template-library"></a> 1. C++ Standard Library VS Standard Template Library</h3><ul><li><p>标准库是以head files的形式呈现的</p></li><li><p>C++的标准模板库 &gt;= STL</p></li></ul><h3 id="2-stl六大部件"><a class="markdownIt-Anchor" href="#2-stl六大部件"></a> 2. STL六大部件</h3><ol><li>容器（Containers）</li><li>分配器（Allocators）</li><li>迭代器（Iterators）</li><li>适配器（Adapters）_变压器</li><li>算法（Algorithms）</li><li>仿函式（Functors）</li></ol><p><a href="https://imgchr.com/i/AFDFTe" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/03/13/AFDFTe.png" alt="AFDFTe.png"></a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ia[<span class="number">6</span>] = &#123;<span class="number">27</span>, <span class="number">48</span>, <span class="number">166</span>, <span class="number">78</span>, <span class="number">14</span>, <span class="number">227</span>&#125;;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>, allocator&lt;<span class="keyword">int</span>&gt;&gt; vi(ia, ia+<span class="number">6</span>);</span><br><span class="line">    <span class="comment">// predicate：判断式</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; count_if(vi.begin(), vi.end(), not1(bind2nd(less&lt;<span class="keyword">int</span>&gt;(), <span class="number">40</span>)));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：</p><ul><li>count_if：algorithm</li><li>not1:function adapter(negator)</li><li>bind2nd:function adapter(binder)</li><li>less:function object</li></ul><h3 id="3-container前闭后开区间-kbd-kbd"><a class="markdownIt-Anchor" href="#3-container前闭后开区间-kbd-kbd"></a> 3. Container——前闭后开区间 <kbd>[ )</kbd></h3><p><img src="https://s2.ax1x.com/2019/03/13/AFDXB8.png" alt="AFDXB8.png"></p><h3 id="4-range-based-for-loopsince-c11"><a class="markdownIt-Anchor" href="#4-range-based-for-loopsince-c11"></a> 4. range-based for loop(since C++11)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式</span></span><br><span class="line"><span class="keyword">for</span> (decl : coll)&#123;</span><br><span class="line">    statement</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//demo1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i: &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;)&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//demo2</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; vec;</span><br><span class="line">...</span><br><span class="line">    <span class="comment">// 按值传递</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> elem : vec)&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; elem &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 按引用传递</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; elem : vec)&#123;</span><br><span class="line">    elem *=<span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-auto-keyword-since-c-11"><a class="markdownIt-Anchor" href="#5-auto-keyword-since-c-11"></a> 5. auto keyword (since C++ 11)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>&lt;<span class="built_in">string</span>&gt; c;</span><br><span class="line">...</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="built_in">string</span>&gt;::iterator ite;</span><br><span class="line">ite = ::find(c.begin(), c.end(), target);</span><br><span class="line"><span class="comment">//-------------等价于---------------//</span></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="built_in">string</span>&gt; c;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">auto</span> ite = ::find(c.begin(), c.end(), target);</span><br></pre></td></tr></table></figure><h3 id="6容器的结构与分类"><a class="markdownIt-Anchor" href="#6容器的结构与分类"></a> 6.容器的结构与分类</h3><p><a href="https://imgchr.com/i/AFrUCd" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/03/13/AFrUCd.md.png" alt="AFrUCd.md.png"></a></p><ul><li><p>不定序容器是红黑树</p></li><li><p>Set、Map中的key——不可重复</p></li><li><p>Multiset、Multimap中的key——不可重复</p></li></ul><p><strong>辅助函数</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">array</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> ASIZE  =   <span class="number">500000L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">get_a_target_long</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> target = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"target (0~"</span> &lt;&lt; RAND_MAX &lt;&lt; <span class="string">"): "</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; target;</span><br><span class="line"><span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">get_a_target_string</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> target = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"target (0~"</span> &lt;&lt; RAND_MAX &lt;&lt; <span class="string">"): "</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; target;</span><br><span class="line"><span class="built_in">snprintf</span>(buf, <span class="number">10</span>, <span class="string">"%d"</span>, target); <span class="comment">// 作用：模拟object的感觉，不能总传value</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">string</span>(buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  下面两个配合qsort使用 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compareLongs</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* a, <span class="keyword">const</span> <span class="keyword">void</span>* b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (*(<span class="keyword">long</span>*)a - *(<span class="keyword">long</span>*)b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compareStrings</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* a, <span class="keyword">const</span> <span class="keyword">void</span>* b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (*(<span class="built_in">string</span>*)a &gt; *(<span class="built_in">string</span>*)b)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (*(<span class="built_in">string</span>*)a &lt; *(<span class="built_in">string</span>*)b)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="array容器"><a class="markdownIt-Anchor" href="#array容器"></a> Array容器</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt; //qsort, bsearch, NULL</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> jj01</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_array</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\ntest_array().......... \n"</span>;</span><br><span class="line">     </span><br><span class="line"><span class="built_in">array</span>&lt;<span class="keyword">long</span>,ASIZE&gt; c;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">clock_t</span> timeStart = clock();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">long</span> i=<span class="number">0</span>; i&lt; ASIZE; ++i) &#123;</span><br><span class="line">        c[i] = rand(); </span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"array.size()= "</span> &lt;&lt; c.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"array.front()= "</span> &lt;&lt; c.front() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"array.back()= "</span> &lt;&lt; c.back() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"array.data()= "</span> &lt;&lt; c.data() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> target = get_a_target_long();</span><br><span class="line"></span><br><span class="line">timeStart = clock();</span><br><span class="line">    ::qsort(c.data(), ASIZE, <span class="keyword">sizeof</span>(<span class="keyword">long</span>), compareLongs);</span><br><span class="line"><span class="keyword">long</span>* pItem = (<span class="keyword">long</span>*)::bsearch(&amp;target, (c.data()), ASIZE, <span class="keyword">sizeof</span>(<span class="keyword">long</span>), compareLongs); <span class="comment">// 二分查找</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"qsort()+bsearch(), milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//    </span></span><br><span class="line">  <span class="keyword">if</span> (pItem != <span class="literal">NULL</span>)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"found, "</span> &lt;&lt; *pItem &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"not found! "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>技巧：</p><ul><li>测试代码最好也要封装成函数；</li><li>用namespace可以避免变量冲突</li><li><strong>变量随用随定义是最好顶格写</strong>，这样方便查找！</li></ul><h3 id="vector容器"><a class="markdownIt-Anchor" href="#vector容器"></a> vector容器</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt; //abort()</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;  //snprintf()</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; //sort()</span></span></span><br><span class="line"><span class="keyword">namespace</span> jj02</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_vector</span><span class="params">(<span class="keyword">long</span>&amp; value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\ntest_vector().......... \n"</span>;</span><br><span class="line">     </span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; c;  </span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">clock_t</span> timeStart = clock();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">long</span> i=<span class="number">0</span>; i&lt; value; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">snprintf</span>(buf, <span class="number">10</span>, <span class="string">"%d"</span>, rand());</span><br><span class="line">        c.push_back(<span class="built_in">string</span>(buf));     </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(exception&amp; p) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"i="</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span> &lt;&lt; p.what() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">     <span class="comment">//曾經最高 i=58389486 then std::bad_alloc</span></span><br><span class="line"><span class="built_in">abort</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"vector.max_size()= "</span> &lt;&lt; c.max_size() &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//1073747823</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"vector.size()= "</span> &lt;&lt; c.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"vector.front()= "</span> &lt;&lt; c.front() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"vector.back()= "</span> &lt;&lt; c.back() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"vector.data()= "</span> &lt;&lt; c.data() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"vector.capacity()= "</span> &lt;&lt; c.capacity() &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对比不同的查找方式</span></span><br><span class="line"><span class="built_in">string</span> target = get_a_target_string();</span><br><span class="line"><span class="comment">//-------------find: 循序查找, 看运气------------</span></span><br><span class="line">    &#123;</span><br><span class="line">timeStart = clock();</span><br><span class="line"><span class="keyword">auto</span> pItem = ::find(c.begin(), c.end(), target); <span class="comment">//模板函数就是全局函数</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"std::find(), milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (pItem != c.end())</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"found, "</span> &lt;&lt; *pItem &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"not found! "</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//-----------sort后bresearch：二分查找-----------------   </span></span><br><span class="line">&#123;</span><br><span class="line">timeStart = clock();</span><br><span class="line">    sort(c.begin(), c.end());</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"sort(), milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line"></span><br><span class="line">timeStart = clock();    </span><br><span class="line"><span class="built_in">string</span>* pItem = (<span class="built_in">string</span>*)::bsearch(&amp;target, (c.data()), </span><br><span class="line">                                   c.size(), <span class="keyword">sizeof</span>(<span class="built_in">string</span>), compareStrings); </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"bsearch(), milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">   </span><br><span class="line">  <span class="keyword">if</span> (pItem != <span class="literal">NULL</span>)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"found, "</span> &lt;&lt; *pItem &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"not found! "</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.clear();</span><br><span class="line">test_moveable(<span class="built_in">vector</span>&lt;MyString&gt;(),<span class="built_in">vector</span>&lt;MyStrNoMove&gt;(), value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>容器的<kbd>capacity</kbd>的是成倍数增长的，在另外的地方开辟内存然后再将原来的复制到新的，过程比较慢</li><li>循序查找不一定比sort后bresearch慢，由此思考时间复杂度</li><li>所有的算法都是全局函数</li><li>容器的定义都有第二参数分配器，一般用默认</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;三月份开始复习&lt;strong&gt;泛型编程&lt;/strong&gt;和&lt;strong&gt;STL&lt;/strong&gt;的体系结构和内核分析,记录今天学的东西。&lt;/p&gt;
&lt;h3 id=&quot;1-c-standard-library-vs-standard-template-library&quot;&gt;&lt;a c
      
    
    </summary>
    
      <category term="C++" scheme="http://yoursite.com/categories/C/"/>
    
    
      <category term="array" scheme="http://yoursite.com/tags/array/"/>
    
      <category term="vector" scheme="http://yoursite.com/tags/vector/"/>
    
  </entry>
  
  <entry>
    <title>智能寻迹爬楼载重清洁装置</title>
    <link href="http://yoursite.com/2019/03/10/%E7%88%AC%E6%A5%BC%E5%B0%8F%E8%BD%A6/"/>
    <id>http://yoursite.com/2019/03/10/爬楼小车/</id>
    <published>2019-03-10T14:09:18.000Z</published>
    <updated>2019-03-24T02:17:38.365Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>就像叶子从痛苦的蜷缩中要用力舒展一样，人也要从不假思索的蒙昧里挣脱，这才是活着。</p><p>​——柴静《看见》</p></blockquote><h2 id="视频见优酷链接"><a class="markdownIt-Anchor" href="#视频见优酷链接"></a> <a href="https://v.youku.com/v_show/id_XNDA5MjQ1MTgzNg==.html?spm=a2h3j.8428770.3416059.1" target="_blank" rel="noopener">视频见优酷链接</a></h2><p>这是我大学作为项目负责人的封山之作，完成了毕业前要做一件真正的实物产品的心愿。这件作品耗费了我巨大的心血，最终的实现效果也没有达到我理想的状态。实践本就没有完美的事情，永远都在探索完美的路上。下文是我在毕业后总结归纳的一些细枝末节，搭建博客之后开学的第二周，作为一个会议记录于此，并时刻提醒自己，接受自己的不完美，但是持续不断的努力。</p><p><a href="https://imgchr.com/i/A9d4I0" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/03/10/A9d4I0.md.png" alt="A9d4I0.md.png"></a></p><h2 id="技术领域"><a class="markdownIt-Anchor" href="#技术领域"></a> <strong>技术领域</strong></h2><p>本发明涉及智能寻迹爬楼载重清洁装置，属于服务类机器人技术领域，其主要功能是实现上下楼负重搬运以及楼梯清洁，可以在没有电梯的建筑楼层使用。</p><h2 id="背景技术"><a class="markdownIt-Anchor" href="#背景技术"></a> 背景技术</h2><p>本发明的最初目的是解决搬运诸如水桶等重物时人工上楼搬运费时费力的问题。同时考虑到楼梯各时间段使用频繁，楼梯层数较多，人力清洁工作繁重，故在尾部加装清洁装置。两者结合通过电机带传动组成搬运清洁两用型的智能装置。国内多数爬楼载重机器人，采用升降式、腿式结构，上楼缓慢效率不高且爬楼机械装置大多不适用于平地，平地使用时所受阻力较大，行动缓慢，转弯不便。基于上述背景我们设计了独特的变形前轮，实现在平路和上下楼的智能切换，以及转向装置能自动调整前轮的角度实现快速转弯。该小车前轮采用变形轮机构，可平地导向也可上下楼梯，控制方式灵活。可适用于各种工厂、住宅楼的货物搬运。同时对车尾稍加人性化设计，便可实现清洁功能，具有较大的社会价值和经济价值。</p><h2 id="发明内容"><a class="markdownIt-Anchor" href="#发明内容"></a> <strong>发明内容</strong></h2><p><img src="https://s2.ax1x.com/2019/03/10/A9KdMT.png" alt="A9KdMT.png"></p><p>本发明的技术方案：</p><p>一种智能寻迹爬楼载重清洁装置，包括电气部分和机械部分；</p><p>所述的电气部分4包括电源4-1和电气模块4-2，以控制超声波导距、单片机、舵机以及电机；</p><p>所述的机械部分包括变形轮机构1、转向机构2、清洁机构3和机身5；</p><p>所述的机身5包括行星轮5-1和机身车座5-2，所述的机身车座5-2为长方形的面板，所述的行星轮5-1有两个，通过轴对称固定在机身车座5-2尾部的两端；</p><p>所述的变形轮机构1有两个，包括变形轮支架1-4、变形轮分支1-1、三爪卡销1-3、变形舵机1-2、圆盘支架1-6和舵盘1-5；</p><p>所述的变形轮分支1-1共三个，依次连接组成轮子的外轮廓；所述的变形轮分支1-1是由三根带有弧度的杆组成的三杆机构，一根外侧杆、一根滑动杆和一根支撑杆；外侧杆构成轮子的外轮廓，其一端设有滑槽，变形轮变形时，相邻的变形轮分支1-1的滑动杆滑入滑槽中；滑动杆和支撑杆的一端均固定在外侧杆上，支撑杆的另一端固定在滑动杆上，滑动杆的另一端铰接于变形轮支架1-4上；所述的滑动杆的下端、内侧设有滑轨，三爪卡销1-3在滑轨中滑动；所述的圆盘支架1-6为中心开有圆孔的圆盘；所述的变形轮支架1-4为中空的圆柱体，圆盘支架1-6中心圆孔的直径与变形轮支架1-4的直径相同，变形轮支架1-4穿过外侧的圆盘支架1-6中心开口，并固定在外侧的圆盘支架1-6上；所述的三爪卡销1-3为一端均匀分布有三个爪的圆柱体，三爪卡销1-3的圆柱体嵌套在变形轮支架1-4的内部，三爪卡销1-3的爪插在三杆机构的滑轨内，三爪卡销1-3的圆柱体设有五个通孔；所述的变形轮分支1-1的滑动杆下部有一个通孔，通过销键和铰环将三个三杆机构均匀固定在变形轮支架1-4上；所述的变形轮支架1-4、三爪卡销1-3和外侧的圆盘支架1-6，共同固定在内侧的圆盘支架1-6上，内侧和外侧的圆盘支架1-6配合，以固定三爪卡销1-3并保证三杆机构在一个平面内移动；所述的变形舵机1-2一端带有五个插杆，通过内侧的圆盘支架1-6的中心圆孔插入三爪卡销1-3的通孔内，使变形舵机1-2与三爪卡销1-3连接；所述的变形舵机1-2，另一端安装有舵盘1-5，变形舵机1-2提供转矩，通过正反转实现变形轮整体和变型的切换；</p><p><img src="https://s2.ax1x.com/2019/03/10/A9wMQg.png" alt="A9wMQg.png"></p><p><img src="https://s2.ax1x.com/2019/03/10/A9KDZ4.png" alt="A9KDZ4.png"></p><p><img src="https://s2.ax1x.com/2019/03/10/A9K5ee.png" alt="A9K5ee.png"></p><p>所述的转向机构2包括轴承座2-1、转动连接装置2-2、转向机构电机2-3、轴2-4、转动舵机2-5、联轴器2-6、皮带2-7、球头拉杆2-8和万向节2-9；所述的轴承座2-1共两个，对称固定在机身车座5-2前部的两端；所述的轴2-4的两端固定在轴承座2-1上，轴2-4的两端安装有万向节2-9，轴2-4通过万向节2-9与舵盘1-5相连接，使变形轮机构1与转向机构2相连接；所述的转向舵机2-5固定在机身车座5-2前部，转向舵机2-5的一侧安装有转动连接装置2-2，转动连接装置2-2的两个插孔分别用于连接球头拉杆2-8，球头拉杆2-8的另一端与万向节2-9外侧连接，使得转向舵机2-5与舵盘1-5相连接；所述的联轴器2-6套装在轴2-4上，所述的转向机构电机2-3固定机身车座5-2上；所述的皮带2-7，一端套装在联轴器2-6上，另一端套装在转向机构电机2-3的输出端；所述的转向机构电机2-3通过皮带2-7和联轴器2-6带动轴2-4旋转，轴2-4来传递动力，带动变形轮机构1运转；所述的转动舵机2-5工作时会左右摆动，球头拉杆2-8将转动舵机2-5的摆动转换为角度变化传递给万向节2-9，接着将该变化传递给与万向节2-9连接的变形轮舵机1-2，从而完成转向工作；</p><p><img src="https://s2.ax1x.com/2019/03/10/A9Kood.png" alt="A9Kood.png"></p><p>所述的清洁机构3位于装置的尾部，包括齿条3-1、刷子3-2、清洁机构电机3-3和齿轮3-4；所述的齿条3-1固定在机身车座5-2的尾部，所述的清洁机构电机3-3固定在机身车座5-2上，所述的齿轮3-4固定在清洁机构电机3-3的输出端，齿轮3-4与齿条3-1相互咬合；所述的刷子3-2位于机身车座5-2的尾部的底表面，通过螺栓活动连接，与齿条3-1固定连接；所述的清洁机构电机3-3的转动带动齿轮3-4转动，进而使齿条3-1横向往复运动，带动刷子3-2的往复运动，实现楼梯的清洁功能；</p><p><img src="https://s2.ax1x.com/2019/03/10/A9Muk9.png" alt="A9Muk9.png"></p><p>所述的电气部分4由电源4-1和电气模块4-2组成；所述的电源4-1和电气模块4-2并排固定在机身车座5-2中间位置；所述的电气模块4-2包括单片机模块和超声波模块。</p><p><img src="https://s2.ax1x.com/2019/03/10/A9MRts.png" alt="A9MRts.png"></p><p><img src="https://s2.ax1x.com/2019/03/10/A9QV3t.png" alt="A9QV3t.png"></p><p>所述的机身车座5-2为亚克力板材质。</p><p>所述的清洁机构电机3-3为37型减速电机。</p><p>所述的变形舵机1-2为RDS3109双轴舵机。</p><p>所述的轴2-4的直径为6mm。</p><p>本发明的有益效果：车采用变形轮结构：平地导向时为圆形，上下楼梯时一分为三，控制方式灵活；该车克服了现有爬楼装置只用于爬楼且平地转向、前行困难的缺点，通过变形轮实现平地上楼自由转换。变形轮简化了传统的铰链机构改用销传动在导轨中移动实现变形，结构简单且不失牢固与严密性，极具创造价值；上下四个超声波模块检测距离差判断墙、楼梯从而绕行和变形；车尾安装清洁装置，可自动清洁楼梯。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;就像叶子从痛苦的蜷缩中要用力舒展一样，人也要从不假思索的蒙昧里挣脱，这才是活着。&lt;/p&gt;
&lt;p&gt;​																		——柴静《看见》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;视频见优酷链接&quot;&gt;&lt;a class=&quot;mar
      
    
    </summary>
    
      <category term="项目" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="避障" scheme="http://yoursite.com/tags/%E9%81%BF%E9%9A%9C/"/>
    
      <category term="超声波检测" scheme="http://yoursite.com/tags/%E8%B6%85%E5%A3%B0%E6%B3%A2%E6%A3%80%E6%B5%8B/"/>
    
      <category term="爬楼装置" scheme="http://yoursite.com/tags/%E7%88%AC%E6%A5%BC%E8%A3%85%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>小型鱼丸生产加工流水线设计</title>
    <link href="http://yoursite.com/2019/03/10/%E9%B1%BC%E4%B8%B8%E6%9C%BA/"/>
    <id>http://yoursite.com/2019/03/10/鱼丸机/</id>
    <published>2019-03-10T06:29:44.000Z</published>
    <updated>2019-03-24T02:17:53.701Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>工作马马虎虎，只想在兴趣和游戏中寻觅快活，充其量只能获得一时的快感，绝不能尝到从心底涌出的惊喜和快乐，但来自工作的喜悦并不像糖果那样——放进嘴里就甜味十足，而是需要从苦劳与艰辛中渗出，因此当我们聚精会神，孜孜不倦，克服艰辛后的成就感，世上没有哪种喜悦可以类比.</p><p>​——稻盛和夫《活法》</p></blockquote><h2 id="视频链接见优酷"><a class="markdownIt-Anchor" href="#视频链接见优酷"></a> <a href="https://v.youku.com/v_show/id_XNDA5MTg2MzA5Mg==.html?spm=a2h3j.8428770.3416059.1" target="_blank" rel="noopener">视频链接见优酷</a></h2><p>大二的时候，出于对工业设计和机械结构的兴趣，自学了SolidWorks，拉上几个朋友一起做了这个项目。来到威海，我们饱含着对大海的一种情怀和向往，致使我们想到了海产品的加工。鱼丸加工整个流水线很是庞大，剖割、清洗、杀菌、擂溃、调料、成型、蒸煮、冷冻到包装。我们着重从拥有较多机械结构的<strong>剖割</strong>、<strong>鱼丸成型</strong>和<strong>包装</strong>三部分建模——自动杀鱼系统、鱼丸成型系统和包装机系统。此套系统运用于鱼的前期处理包括去鳞，去内脏，去头尾，清洗等，以及鱼丸的成型和包装一体化的生产。</p><p>主要是用<strong>SolidWorks</strong>进行设计，<strong>keyshot</strong>进行渲染，<strong>Solid-Composer</strong>结合<strong>AE</strong>进行视频制作。整个项目的工程量相当大，从目标敲定到最后的完工花了将近四个月的时间。由于之间机器人比赛的经验，作为队长我很好的进行了分工和计划推进，最终的结果还是挺让人激动的。</p><h3 id="总设计图"><a class="markdownIt-Anchor" href="#总设计图"></a> 总设计图</h3><p><img src="https://s2.ax1x.com/2019/03/09/ASHY7t.jpg" alt="ASHY7t.jpg"></p><p><img src="https://s2.ax1x.com/2019/03/10/A9pHGd.png" alt="A9pHGd.png"></p><p><img src="https://s2.ax1x.com/2019/03/10/A9EaH1.png" alt="A9EaH1.png"></p><p><img src="https://s2.ax1x.com/2019/03/10/A9EuBn.png" alt="A9EuBn.png"></p><h3 id="杀鱼机部分"><a class="markdownIt-Anchor" href="#杀鱼机部分"></a> 杀鱼机部分</h3><p><img src="https://s2.ax1x.com/2019/03/09/ASHJ0I.jpg" alt="ASHJ0I.jpg"></p><p><img src="https://s2.ax1x.com/2019/03/10/A9pWKx.png" alt="A9pWKx.png"></p><p>机器主要传动方式为齿轮传动和皮带传动，将鱼平放在传送带上，前后的夹持装置把鱼尾和鱼头夹住；水平方向的刀片将鱼腹剖开，带有软毛刷的小滚筒将内脏清除，同时毛刷中的空心管冲水清洗鱼腹，内脏落至下方垃圾箱内；之后竖直方向的刀片将鱼头鱼尾切掉，鱼腹由出口处传送带运出，鱼头鱼尾回到垃圾箱上方，夹持装置上的顶杆使其落至垃圾箱中。</p><h3 id="鱼丸成型机部分"><a class="markdownIt-Anchor" href="#鱼丸成型机部分"></a> 鱼丸成型机部分</h3><p><img src="https://s2.ax1x.com/2019/03/09/ASHUtf.jpg" alt="ASHUtf.jpg"></p><p><img src="https://s2.ax1x.com/2019/03/10/A9p2x1.png" alt="A9p2x1.png"></p><p>鱼丸的成型方面运用了行星齿轮机构并综合了能量守恒及流体力学等方面要求设计了变速管以实现鱼丸成型，防止阻塞现象的发生。</p><h3 id="包装机部分"><a class="markdownIt-Anchor" href="#包装机部分"></a> 包装机部分</h3><p><img src="https://s2.ax1x.com/2019/03/09/ASHNAP.jpg" alt="ASHNAP.jpg"></p><p><img src="https://s2.ax1x.com/2019/03/10/A9poIe.png" alt="A9poIe.png"></p><p>包装机则通过两侧传送装置同时送纸袋，创新地运用到三边封口装置，其中用四个锥齿轮和连杆组成传动机构同时封左右和下口，上口鱼丸掉落后，通过两个机械臂的配合使包装袋转过90度后，另一个连杆机构再封装上口，而后掉落至传送带完成包装。</p><p>这些东西相当于对之前有个交代吧，知识都是相通的，要不断得在成功的地方吸取养分，然后迁移到其他地方。正如前文的摘录，孜孜以求才能活得更大的幸福，加油！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;工作马马虎虎，只想在兴趣和游戏中寻觅快活，充其量只能获得一时的快感，绝不能尝到从心底涌出的惊喜和快乐，但来自工作的喜悦并不像糖果那样——放进嘴里就甜味十足，而是需要从苦劳与艰辛中渗出，因此当我们聚精会神，孜孜不倦，克服艰辛后的成就感，世上没有哪种喜
      
    
    </summary>
    
      <category term="项目" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="SolidWorks" scheme="http://yoursite.com/tags/SolidWorks/"/>
    
      <category term="keyshot" scheme="http://yoursite.com/tags/keyshot/"/>
    
      <category term="机械设计" scheme="http://yoursite.com/tags/%E6%9C%BA%E6%A2%B0%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>2019年，未来的你怎么样了</title>
    <link href="http://yoursite.com/2019/02/08/%E4%BB%8A%E5%A4%A9%E8%81%8A%E8%81%8A%E6%A2%A6%E6%83%B3/"/>
    <id>http://yoursite.com/2019/02/08/今天聊聊梦想/</id>
    <published>2019-02-08T14:11:38.000Z</published>
    <updated>2019-03-05T07:49:29.616Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>平淡的生活里，最怕不是没有斗志，而是像《无问西东》里说得那样，把自己置身于忙碌当中，有一种麻木的踏实，但丧失了真实……</p></blockquote><p><img src="https://s2.ax1x.com/2019/03/05/kXvYY8.png" alt="kXvYY8.png"></p><p>很久没有通过文字和自己对话了，而时间不知不觉却已来到了2019年。无论内心汹涌澎湃还是波澜不惊，都抵不住日历一页页得翩跹而逝。在时间面前，众生平等，而任何微小的差异经过时间的放大，每个人的人生各自划过不同的轨迹，律动不同的音符。每当独处时，当音乐停止，我对眼前是世界依然是一无所知。</p><p>2018从某种意义上是改变和收获的一年。开始看电子书，开始打字写文章，开始不断学习编程，开始健身，开始重新热爱足球。这些之前我都不曾做过的事情，在2018年变得稀松平常了。我曾固执的认为电子书永远没有纸质书籍让我读起来有感觉，我曾因为机械专业的禁锢对编程拒之门外，我也曾因为喜欢跑步尤其是徜徉在威海的环海路跑步无数次拒绝去健身房撸铁，而改变都在悄然发生着。我通过电子书籍更快的获取营养，借助博客更好的练习表达能力，而健身让我的瘦弱的身体渐渐变得强壮，俄罗斯世界杯让我重燃对足球的热爱。有时我不禁问自己，改变好像也不难，但是你能坚持多久呢？</p><p>成功也不难，高中化学老师说过，不过“专注”二字。何其难，何其难，对于我这个对所有事物保持好奇而只有三分钟热度的人来说，成功还有我的一席之地吗？高考的失败在于没有持续努力，保研的苦果在于固执和缺乏沟通，每当在人生的转折点，我都会突然迷失，而今年我又面临着似乎更重要的抉择——就业。</p><p>乱花渐欲迷人眼，周遭的太多新奇和诱惑，我总是在一些事物中来回切换，而没有一直专注于一件事，这样导致了大量时间在重复曾经熟悉的东西而没有更深入地学习，吉他，编程，cv，dota等等都是如此，我希望自己能专注于一个点深入下去一探究竟，而不是大包大揽得学习很多表层的东西。表层的东西只要付出少量的时间成本就能够获得，深层的东西才是值得去挖掘的，而深层的获得需要日积月累得表层知识的铺垫，让理性逐渐渗透进感性，感觉就来了。能够有C罗的自律可能是一种奢望，但是我希望自己在没有很高天赋的情况下，能够自律得去面对生活，每当生活的很舒服的时候，我却常常惴惴不安，似乎只有辛勤的开垦才能让一天充满幸福，我不知道这是不是穷人的思维。然而麻木的踏实也是自我欺骗，这样并不能收获真实的快乐。</p><p>现在先坚持学习编程，吉他和健身，至于时间会将我带向哪里，在浪潮中去翻涌吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;平淡的生活里，最怕不是没有斗志，而是像《无问西东》里说得那样，把自己置身于忙碌当中，有一种麻木的踏实，但丧失了真实……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/03/05/kX
      
    
    </summary>
    
      <category term="杂记" scheme="http://yoursite.com/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="杂记" scheme="http://yoursite.com/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>操作像素的14中方法</title>
    <link href="http://yoursite.com/2019/02/02/%E6%93%8D%E4%BD%9C%E5%83%8F%E7%B4%A0%E7%9A%8414%E4%B8%AD%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/02/02/操作像素的14中方法/</id>
    <published>2019-02-02T14:00:24.000Z</published>
    <updated>2019-02-02T14:17:48.392Z</updated>
    
    <content type="html"><![CDATA[<p>​OpenCV是我研途中重点打交道的工具库。教研室流传下来的图像处理程序都是基于OpenCV1的code，那更底层，更多指针与结构体。而如今OpenCV4都已经更新了，C++强调接口的实用是大势所趋，用到什么去看相关的函数即可。这半年的学习让我深刻体会到线性学习的弊端和不足，这也是研究生主要看论文而本科生主要以课本为主的原因，链式学习更能快速打通各个学科之间的交叉与联系，保证学习的效率。</p><p>今天记录一下操作元素的思路。课题中的图像处理往往是通过各种方法提取到边缘后扫点，将点储存在容器中再拟合圆或者直线。如何快速扫描像素呢，国外的一本书中给出了14中不同的方式。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------------------【宏定义部分】---------------------------------------------</span></span><br><span class="line"><span class="comment">//        描述：包含程序所使用宏定义</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTESTS 14</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NITERATIONS 20</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------------------- 【方法一】-------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用.ptr 和 []</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce0</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> nl= image.rows; <span class="comment">//行数</span></span><br><span class="line">      <span class="keyword">int</span> nc= image.cols * image.channels(); <span class="comment">//每行元素的总元素数量</span></span><br><span class="line">              </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nl; j++)</span><br><span class="line">      &#123;</span><br><span class="line"></span><br><span class="line">          uchar* data= image.ptr&lt;uchar&gt;(j);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nc; i++)</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line">                 </span><br><span class="line">                  data[i]= data[i]/div*div + div/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">            &#125; <span class="comment">//单行处理结束                  </span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------------------------【方法二】-------------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用 .ptr 和 * ++</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce1</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> nl= image.rows; <span class="comment">//行数</span></span><br><span class="line">      <span class="keyword">int</span> nc= image.cols * image.channels(); <span class="comment">//每行元素的总元素数量</span></span><br><span class="line">              </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nl; j++)</span><br><span class="line">      &#123;</span><br><span class="line"></span><br><span class="line">          uchar* data= image.ptr&lt;uchar&gt;(j);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nc; i++)</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line">                 </span><br><span class="line">                 *data++= *data/div*div + div/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">            &#125; <span class="comment">//单行处理结束              </span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------------------------------【方法三】-------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用.ptr 和 * ++ 以及模操作</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce2</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> nl= image.rows; <span class="comment">//行数</span></span><br><span class="line">      <span class="keyword">int</span> nc= image.cols * image.channels(); <span class="comment">//每行元素的总元素数量</span></span><br><span class="line">              </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nl; j++)</span><br><span class="line">      &#123;</span><br><span class="line"></span><br><span class="line">          uchar* data= image.ptr&lt;uchar&gt;(j);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nc; i++)</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line">       </span><br><span class="line">                  <span class="keyword">int</span> v= *data;</span><br><span class="line">                  *data++= v - v%div + div/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">            &#125; <span class="comment">//单行处理结束                   </span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------------------【方法四】---------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用.ptr 和 * ++ 以及位操作</span></span><br><span class="line"><span class="comment">//----------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce3</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> nl= image.rows; <span class="comment">//行数</span></span><br><span class="line">      <span class="keyword">int</span> nc= image.cols * image.channels(); <span class="comment">//每行元素的总元素数量</span></span><br><span class="line">      <span class="keyword">int</span> n= <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="built_in">log</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(div))/<span class="built_in">log</span>(<span class="number">2.0</span>));</span><br><span class="line">      <span class="comment">//掩码值</span></span><br><span class="line">      uchar mask= <span class="number">0xFF</span>&lt;&lt;n; <span class="comment">// e.g. 对于 div=16, mask= 0xF0</span></span><br><span class="line">              </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nl; j++) &#123;</span><br><span class="line"></span><br><span class="line">          uchar* data= image.ptr&lt;uchar&gt;(j);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nc; i++) &#123;</span><br><span class="line">            <span class="comment">//------------开始处理每个像素-------------------</span></span><br><span class="line">                 </span><br><span class="line">            *data++= *data&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">            &#125;  <span class="comment">//单行处理结束            </span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------------------【方法五】----------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用指针算术运算</span></span><br><span class="line"><span class="comment">//---------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce4</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> nl= image.rows; <span class="comment">//行数</span></span><br><span class="line">      <span class="keyword">int</span> nc= image.cols * image.channels(); <span class="comment">//每行元素的总元素数量</span></span><br><span class="line">      <span class="keyword">int</span> n= <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="built_in">log</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(div))/<span class="built_in">log</span>(<span class="number">2.0</span>));</span><br><span class="line">      <span class="keyword">int</span> step= image.step; <span class="comment">//有效宽度</span></span><br><span class="line">      <span class="comment">//掩码值</span></span><br><span class="line">      uchar mask= <span class="number">0xFF</span>&lt;&lt;n; <span class="comment">// e.g. 对于 div=16, mask= 0xF0</span></span><br><span class="line">              </span><br><span class="line">      <span class="comment">//获取指向图像缓冲区的指针</span></span><br><span class="line">      uchar *data= image.data;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nl; j++)</span><br><span class="line">      &#123;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nc; i++)</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line">                 </span><br><span class="line">            *(data+i)= *data&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">            &#125; <span class="comment">//单行处理结束              </span></span><br><span class="line"></span><br><span class="line">            data+= step;  <span class="comment">// next line</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------------------------【方法六】----------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用 .ptr 和 * ++以及位运算、image.cols * image.channels()</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce5</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> nl= image.rows; <span class="comment">//行数</span></span><br><span class="line">      <span class="keyword">int</span> n= <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="built_in">log</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(div))/<span class="built_in">log</span>(<span class="number">2.0</span>));</span><br><span class="line">      <span class="comment">//掩码值</span></span><br><span class="line">      uchar mask= <span class="number">0xFF</span>&lt;&lt;n; <span class="comment">// e.g. 例如div=16, mask= 0xF0</span></span><br><span class="line">              </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nl; j++)</span><br><span class="line">      &#123;</span><br><span class="line"></span><br><span class="line">          uchar* data= image.ptr&lt;uchar&gt;(j);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;image.cols * image.channels(); i++)</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line">                 </span><br><span class="line">            *data++= *data&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">            &#125; <span class="comment">//单行处理结束            </span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// -------------------------------------【方法七】----------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用.ptr 和 * ++ 以及位运算(continuous)</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce6</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> nl= image.rows; <span class="comment">//行数</span></span><br><span class="line">      <span class="keyword">int</span> nc= image.cols * image.channels(); <span class="comment">//每行元素的总元素数量</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (image.isContinuous())  </span><br><span class="line">      &#123;</span><br><span class="line">          <span class="comment">//无填充像素</span></span><br><span class="line">          nc= nc*nl;</span><br><span class="line">          nl= <span class="number">1</span>;  <span class="comment">// 为一维数列</span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> n= <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="built_in">log</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(div))/<span class="built_in">log</span>(<span class="number">2.0</span>));</span><br><span class="line">      <span class="comment">//掩码值</span></span><br><span class="line">      uchar mask= <span class="number">0xFF</span>&lt;&lt;n; <span class="comment">// e.g. 比如div=16, mask= 0xF0</span></span><br><span class="line">              </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nl; j++) &#123;</span><br><span class="line"></span><br><span class="line">          uchar* data= image.ptr&lt;uchar&gt;(j);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nc; i++) &#123;</span><br><span class="line">            <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line">                 </span><br><span class="line">            *data++= *data&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">            &#125; <span class="comment">//单行处理结束                   </span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------【方法八】------------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用 .ptr 和 * ++ 以及位运算 (continuous+channels)</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce7</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> nl= image.rows; <span class="comment">//行数</span></span><br><span class="line">      <span class="keyword">int</span> nc= image.cols ; <span class="comment">//列数</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (image.isContinuous())  </span><br><span class="line">      &#123;</span><br><span class="line">          <span class="comment">//无填充像素</span></span><br><span class="line">          nc= nc*nl;</span><br><span class="line">          nl= <span class="number">1</span>;  <span class="comment">// 为一维数组</span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> n= <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="built_in">log</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(div))/<span class="built_in">log</span>(<span class="number">2.0</span>));</span><br><span class="line">      <span class="comment">//掩码值</span></span><br><span class="line">      uchar mask= <span class="number">0xFF</span>&lt;&lt;n; <span class="comment">// e.g. 比如div=16, mask= 0xF0</span></span><br><span class="line">              </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nl; j++) &#123;</span><br><span class="line"></span><br><span class="line">          uchar* data= image.ptr&lt;uchar&gt;(j);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nc; i++) &#123;</span><br><span class="line">            <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line">                 </span><br><span class="line">            *data++= *data&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">            *data++= *data&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">            *data++= *data&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">            &#125; <span class="comment">//单行处理结束                    </span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// -----------------------------------【方法九】 ------------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用Mat_ iterator</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce8</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//获取迭代器</span></span><br><span class="line">      Mat_&lt;Vec3b&gt;::iterator it= image.begin&lt;Vec3b&gt;();</span><br><span class="line">      Mat_&lt;Vec3b&gt;::iterator itend= image.end&lt;Vec3b&gt;();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> ( ; it!= itend; ++it) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line"></span><br><span class="line">        (*it)[<span class="number">0</span>]= (*it)[<span class="number">0</span>]/div*div + div/<span class="number">2</span>;</span><br><span class="line">        (*it)[<span class="number">1</span>]= (*it)[<span class="number">1</span>]/div*div + div/<span class="number">2</span>;</span><br><span class="line">        (*it)[<span class="number">2</span>]= (*it)[<span class="number">2</span>]/div*div + div/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">      &#125;<span class="comment">//单行处理结束  </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------------【方法十】-----------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用Mat_ iterator以及位运算</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce9</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// div必须是2的幂</span></span><br><span class="line">      <span class="keyword">int</span> n= <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="built_in">log</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(div))/<span class="built_in">log</span>(<span class="number">2.0</span>));</span><br><span class="line">      <span class="comment">//掩码值</span></span><br><span class="line">      uchar mask= <span class="number">0xFF</span>&lt;&lt;n; <span class="comment">// e.g. 比如 div=16, mask= 0xF0</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 获取迭代器</span></span><br><span class="line">      Mat_&lt;Vec3b&gt;::iterator it= image.begin&lt;Vec3b&gt;();</span><br><span class="line">      Mat_&lt;Vec3b&gt;::iterator itend= image.end&lt;Vec3b&gt;();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//扫描所有元素</span></span><br><span class="line">      <span class="keyword">for</span> ( ; it!= itend; ++it)</span><br><span class="line">      &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line"></span><br><span class="line">        (*it)[<span class="number">0</span>]= (*it)[<span class="number">0</span>]&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">        (*it)[<span class="number">1</span>]= (*it)[<span class="number">1</span>]&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">        (*it)[<span class="number">2</span>]= (*it)[<span class="number">2</span>]&amp;mask + div/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">      &#125;<span class="comment">//单行处理结束  </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------【方法十一】---------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用Mat Iterator_</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce10</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//获取迭代器</span></span><br><span class="line">      Mat_&lt;Vec3b&gt; cimage= image;</span><br><span class="line">      Mat_&lt;Vec3b&gt;::iterator it=cimage.begin();</span><br><span class="line">      Mat_&lt;Vec3b&gt;::iterator itend=cimage.end();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> ( ; it!= itend; it++) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line"></span><br><span class="line">        (*it)[<span class="number">0</span>]= (*it)[<span class="number">0</span>]/div*div + div/<span class="number">2</span>;</span><br><span class="line">        (*it)[<span class="number">1</span>]= (*it)[<span class="number">1</span>]/div*div + div/<span class="number">2</span>;</span><br><span class="line">        (*it)[<span class="number">2</span>]= (*it)[<span class="number">2</span>]/div*div + div/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------------------【方法十二】--------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用动态地址计算配合at</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce11</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> nl= image.rows; <span class="comment">//行数</span></span><br><span class="line">      <span class="keyword">int</span> nc= image.cols; <span class="comment">//列数</span></span><br><span class="line">              </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nl; j++)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nc; i++)</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line">                 </span><br><span class="line">                  image.at&lt;Vec3b&gt;(j,i)[<span class="number">0</span>]=     image.at&lt;Vec3b&gt;(j,i)[<span class="number">0</span>]/div*div + div/<span class="number">2</span>;</span><br><span class="line">                  image.at&lt;Vec3b&gt;(j,i)[<span class="number">1</span>]=     image.at&lt;Vec3b&gt;(j,i)[<span class="number">1</span>]/div*div + div/<span class="number">2</span>;</span><br><span class="line">                  image.at&lt;Vec3b&gt;(j,i)[<span class="number">2</span>]=     image.at&lt;Vec3b&gt;(j,i)[<span class="number">2</span>]/div*div + div/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">            &#125; <span class="comment">//单行处理结束                 </span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------------【方法十三】-----------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用图像的输入与输出</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce12</span><span class="params">(<span class="keyword">const</span> Mat &amp;image, <span class="comment">//输入图像</span></span></span></span><br><span class="line"><span class="function"><span class="params">                 Mat &amp;result,      <span class="comment">// 输出图像</span></span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> nl= image.rows; <span class="comment">//行数</span></span><br><span class="line">      <span class="keyword">int</span> nc= image.cols ; <span class="comment">//列数</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//准备好初始化后的Mat给输出图像</span></span><br><span class="line">      result.create(image.rows,image.cols,image.type());</span><br><span class="line"></span><br><span class="line">      <span class="comment">//创建无像素填充的图像</span></span><br><span class="line">      nc= nc*nl;</span><br><span class="line">      nl= <span class="number">1</span>;  <span class="comment">//单维数组</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> n= <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="built_in">log</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(div))/<span class="built_in">log</span>(<span class="number">2.0</span>));</span><br><span class="line">      <span class="comment">//掩码值</span></span><br><span class="line">      uchar mask= <span class="number">0xFF</span>&lt;&lt;n; <span class="comment">// e.g.比如div=16, mask= 0xF0</span></span><br><span class="line">              </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nl; j++) &#123;</span><br><span class="line"></span><br><span class="line">          uchar* data= result.ptr&lt;uchar&gt;(j);</span><br><span class="line">          <span class="keyword">const</span> uchar* idata= image.ptr&lt;uchar&gt;(j);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nc; i++) &#123;</span><br><span class="line">            <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line">                 </span><br><span class="line">            *data++= (*idata++)&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">            *data++= (*idata++)&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">            *data++= (*idata++)&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">          &#125; <span class="comment">//单行处理结束                   </span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------------------【方法十四】-------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用操作符重载</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce13</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">int</span> n= <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="built_in">log</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(div))/<span class="built_in">log</span>(<span class="number">2.0</span>));</span><br><span class="line">      <span class="comment">//掩码值</span></span><br><span class="line">      uchar mask= <span class="number">0xFF</span>&lt;&lt;n; <span class="comment">// e.g. 比如div=16, mask= 0xF0</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//进行色彩还原</span></span><br><span class="line">      image=(image&amp;Scalar(mask,mask,mask))+Scalar(div/<span class="number">2</span>,div/<span class="number">2</span>,div/<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------------------------【main( )函数】--------------------------------------------</span></span><br><span class="line"><span class="comment">//        描述：控制台应用程序的入口函数，我们的程序从这里开始</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    int64 t[NTESTS],tinit;</span><br><span class="line">    Mat image0;</span><br><span class="line">    Mat image1;</span><br><span class="line">    Mat image2;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">"color 4F"</span>);</span><br><span class="line"></span><br><span class="line">    image0= imread(<span class="string">"1.png"</span>);</span><br><span class="line">    <span class="keyword">if</span> (!image0.data)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//时间值设为0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;NTESTS; i++)</span><br><span class="line">        t[i]= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 多次重复测试</span></span><br><span class="line">    <span class="keyword">int</span> n=NITERATIONS;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;n; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; k &lt;&lt; <span class="string">" of "</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        <span class="comment">//【方法一】利用.ptr 和 []</span></span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce0(image1);</span><br><span class="line">        t[<span class="number">0</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法二】利用 .ptr 和 * ++</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce1(image1);</span><br><span class="line">        t[<span class="number">1</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法三】利用.ptr 和 * ++ 以及模操作</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce2(image1);</span><br><span class="line">        t[<span class="number">2</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法四】 利用.ptr 和 * ++ 以及位操作</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce3(image1);</span><br><span class="line">        t[<span class="number">3</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法五】 利用指针的算术运算</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce4(image1);</span><br><span class="line">        t[<span class="number">4</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法六】利用 .ptr 和 * ++以及位运算、image.cols * image.channels()</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce5(image1);</span><br><span class="line">        t[<span class="number">5</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法七】利用.ptr 和 * ++ 以及位运算(continuous)</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce6(image1);</span><br><span class="line">        t[<span class="number">6</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法八】利用 .ptr 和 * ++ 以及位运算 (continuous+channels)</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce7(image1);</span><br><span class="line">        t[<span class="number">7</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法九】 利用Mat_ iterator</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce8(image1);</span><br><span class="line">        t[<span class="number">8</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法十】 利用Mat_ iterator以及位运算</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce9(image1);</span><br><span class="line">        t[<span class="number">9</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法十一】利用Mat Iterator_</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce10(image1);</span><br><span class="line">        t[<span class="number">10</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法十二】 利用动态地址计算配合at</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce11(image1);</span><br><span class="line">        t[<span class="number">11</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法十三】 利用图像的输入与输出</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        Mat result;</span><br><span class="line">        colorReduce12(image1, result);</span><br><span class="line">        t[<span class="number">12</span>]+= getTickCount()-tinit;</span><br><span class="line">        image2= result;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//【方法十四】 利用操作符重载</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce13(image1);</span><br><span class="line">        t[<span class="number">13</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//------------------------------</span></span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">//输出图像   </span></span><br><span class="line">    imshow(<span class="string">"原始图像"</span>,image0);</span><br><span class="line">    imshow(<span class="string">"结果"</span>,image2);</span><br><span class="line">    imshow(<span class="string">"图像结果"</span>,image1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出平均执行时间</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"-------------------------------------------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法一】利用.ptr 和 []的方法所用时间为 "</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">0</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法二】利用 .ptr 和 * ++ 的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">1</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法三】利用.ptr 和 * ++ 以及模操作的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">2</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法四】利用.ptr 和 * ++ 以及位操作的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">3</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法五】利用指针算术运算的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">4</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法六】利用 .ptr 和 * ++以及位运算、channels()的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">5</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法七】利用.ptr 和 * ++ 以及位运算(continuous)的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">6</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法八】利用 .ptr 和 * ++ 以及位运算 (continuous+channels)的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">7</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法九】利用Mat_ iterator 的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">8</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法十】利用Mat_ iterator以及位运算的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">9</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法十一】利用Mat Iterator_的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">10</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法十二】利用动态地址计算配合at 的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">11</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法十三】利用图像的输入与输出的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">12</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法十四】利用操作符重载的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">13</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;    </span><br><span class="line">    </span><br><span class="line">    waitKey();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​	OpenCV是我研途中重点打交道的工具库。教研室流传下来的图像处理程序都是基于OpenCV1的code，那更底层，更多指针与结构体。而如今OpenCV4都已经更新了，C++强调接口的实用是大势所趋，用到什么去看相关的函数即可。这半年的学习让我深刻体会到线性学习的弊端和不
      
    
    </summary>
    
      <category term="OpenCV" scheme="http://yoursite.com/categories/OpenCV/"/>
    
    
      <category term="OpenCV" scheme="http://yoursite.com/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>机器视觉在晶振外壳缺陷检测中的应用</title>
    <link href="http://yoursite.com/2019/02/01/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E5%9C%A8%E6%99%B6%E6%8C%AF%E5%A4%96%E5%A3%B3%E7%BC%BA%E9%99%B7%E6%A3%80%E6%B5%8B%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2019/02/01/机器视觉在晶振外壳缺陷检测中的应用/</id>
    <published>2019-02-01T08:28:09.000Z</published>
    <updated>2019-02-01T08:55:28.242Z</updated>
    
    <content type="html"><![CDATA[<p><strong>参考文献：</strong></p><p><code>庞章炯,张 鹰,谢佩军,计时鸣. 机器视觉在晶振外壳缺陷检测中的应用</code></p><ul><li><p>晶振外壳：微型冲压件，内底 侧面 缺陷较大</p></li><li><p><strong>图像处理</strong>：边缘检测、数学形态学、拓扑描述</p></li></ul><p><strong>机器视觉在制造业上分为：</strong></p><ol><li>基于产品特征的检测：空间特征、表面品质特征、结构特征</li><li>机器人</li></ol><p><mark>对于大曲率的金属物件表面检测，最理想的方案是 使用同轴照明</mark></p><p><strong>重要公式</strong>：</p><p><img src="http://i1.bvimg.com/675947/5a07ba4319f4beaa.png" alt="RGB到HSV转换公式"></p><p>高亮反射区产生的光斑常与其他高亮区域相连，因此需利用数学形态学的相关操作</p><p>形态学可以用来简化图像数据，保持图像的基本形状特性，同时去掉图像中与研究目的无关的部分</p><p>数学形态学：集合论</p><p>膨胀  腐蚀  开启   闭合</p><p>通常给出一个图像集合和一个结构元素集合，利用结构元素对图像进行操作</p><p>拓扑学(topology)</p><p>研究 图形不受畸变变形影响的性质 。</p><p>对于一个 给定平面区域来说 ，区域内的孔数H和区域内的连通组元个数 c 都是常用的拓扑性质</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;参考文献：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;庞章炯,张 鹰,谢佩军,计时鸣. 机器视觉在晶振外壳缺陷检测中的应用&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;晶振外壳：微型冲压件，内底 侧面 缺陷较大&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;s
      
    
    </summary>
    
      <category term="Paper Summary" scheme="http://yoursite.com/categories/Paper-Summary/"/>
    
    
      <category term="机器视觉" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
      <category term="晶振" scheme="http://yoursite.com/tags/%E6%99%B6%E6%8C%AF/"/>
    
      <category term="图像处理" scheme="http://yoursite.com/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>误差补偿模型</title>
    <link href="http://yoursite.com/2019/01/28/%E8%AF%AF%E5%B7%AE%E8%A1%A5%E5%81%BF%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2019/01/28/误差补偿模型/</id>
    <published>2019-01-28T08:41:17.000Z</published>
    <updated>2019-02-01T09:29:00.462Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>就像来自遥远宇宙的一束光，不知道它从哪里来，也不知道它到哪里去，从我们头上掠过，波澜不惊。</p></blockquote><h3 id="误差来源"><a class="markdownIt-Anchor" href="#误差来源"></a> 误差来源</h3><p>视觉测量误差主要来源有：图像采集误差，相机安装误差，运动平台误差。其中高精度的CCD传感器与图像采集卡的误差微乎其微可以忽略；相机坐标系如果与水平面不共面或共面但是存在夹角都会引入误差；三维运动平台的几何误差的垂直度问题将导致图像处理中的圆心提取和图像拼接，误差需要补偿。</p><h3 id="坐标系转换"><a class="markdownIt-Anchor" href="#坐标系转换"></a> 坐标系转换</h3><p><img src="https://img-blog.csdnimg.cn/20181122134704175.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZseV93dA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol><li>图像坐标系<br><img src="https://img-blog.csdnimg.cn/20181122141206254.png" alt="在这里插入图片描述"><br>图像坐标系建立在CCD传感器的面上如上图。</li><li>视觉坐标系<br><img src="https://img-blog.csdnimg.cn/20181122141220479.png" alt="在这里插入图片描述"></li><li>装配作业坐标系<br>与视觉坐标系建系相同<br><img src="https://img-blog.csdnimg.cn/20181122141449212.png" alt="在这里插入图片描述"></li><li>世界坐标系<br>世界坐标系是空间绝对坐标系，选取视觉坐标为世界坐标系即可</li></ol><h3 id="转换"><a class="markdownIt-Anchor" href="#转换"></a> 转换</h3><p>各坐标系的空间位置如图所示，三维运动平台中X轴和Y轴滑台不垂直，YV0和YC0为实际的Y轴滑台运动方向。图像坐标系UOV与世界坐标系XWOYW之间的夹角为θ，以世界坐标系XW轴为基准，图像U轴向世界坐标系Y轴正方向偏转为正，反之为负。视觉测量模块三维运动平台X轴与YV0轴滑台之间的夹角为α。世界坐标系和装配作业坐标系XCOYC之间的夹角为φ，以世界坐标系X轴为基准，装配作业坐标系X轴向世界坐标系Y轴正方向偏转为正，反之为负。装配作业模块三维运动平台X轴与YC0轴滑台之间夹角为β。<br><img src="https://img-blog.csdnimg.cn/20190113194541759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZseV93dA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>根据坐标系之间的坐标转换关系建立误差补偿模型，以图像中一点为例，分别将其从图像坐标系装换到世界坐标系和装配作业坐标系中。<br>首先完成由图像坐标系向世界坐标系的转换，设图像中一点（u，v），其在世界坐标系中的坐标为（x，y），由于图像坐标系单位为像素，世界坐标系单位为微米，单位转换关系为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable side="right"><mlabeledtr><mtd><mtext>(1)</mtext></mtd><mtd><mrow><mi>P</mi><mo>=</mo><mrow><mo fence="true">{</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">​</mi><msub><mi>u</mi><mn>0</mn></msub><mo>=</mo><mi>u</mi><mo>×</mo><msub><mi>S</mi><mi>x</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">​</mi><msub><mi>v</mi><mn>0</mn></msub><mo>=</mo><mi>v</mi><mo>×</mo><msub><mi>S</mi><mi>y</mi></msub><mi mathvariant="normal">​</mi></mrow></mstyle></mtd></mtr></mtable></mrow><mi mathvariant="normal">​</mi></mrow></mtd></mlabeledtr></mtable><annotation encoding="application/x-tex">P=\begin{cases} ​u_0=u \times S_x\\ ​v_0=v \times S_y​\end{cases} \tag{1}​</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">​</span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">​</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord">​</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">​</span></span><span class="tag"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">1</span></span><span class="mord">)</span></span></span></span></span></span></p><p>相应的矩阵形式<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>M</mi><mi>s</mi></msub></mrow><annotation encoding="application/x-tex">M_s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable side="right"><mlabeledtr><mtd><mtext>(2)</mtext></mtd><mtd><mrow><msub><mi>M</mi><mi>s</mi></msub><mo>=</mo><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>S</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>S</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow></mtd></mlabeledtr></mtable><annotation encoding="application/x-tex">M_s= \begin{bmatrix}   S_x &amp; 0 &amp; 0 \\   0&amp; S_y &amp; 0 \\  0 &amp; 0 &amp; 1  \end{bmatrix} \tag{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span><span class="tag"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">2</span></span><span class="mord">)</span></span></span></span></span></span></p><p>图像坐标系和世界坐标系坐标轴之间存在夹角θ，需对图像坐标系进行旋转，旋转矩阵<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>M</mi><mi>R</mi></msub></mrow><annotation encoding="application/x-tex">M_R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable side="right"><mlabeledtr><mtd><mtext>(3)</mtext></mtd><mtd><mrow><msub><mi>M</mi><mi>R</mi></msub><mo>=</mo><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow></mtd></mlabeledtr></mtable><annotation encoding="application/x-tex">M_R= \begin{bmatrix}  cos\theta &amp; -sin\theta &amp; 0 \\  sin\theta&amp; cos\theta&amp; 0 \\  0 &amp; 0 &amp; 1  \end{bmatrix} \tag{3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span><span class="tag"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">3</span></span><span class="mord">)</span></span></span></span></span></span></p><p>采集过程中相机会变换采集位置，应该对图像坐标系原点和世界坐标系原点之间的距离进行补偿，需要进行平移变换，相应的平移变换矩阵<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>M</mi><mi>T</mi></msub></mrow><annotation encoding="application/x-tex">M_T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable side="right"><mlabeledtr><mtd><mtext>(4)</mtext></mtd><mtd><mrow><msub><mi>M</mi><mi>T</mi></msub><mo>=</mo><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>D</mi><mi>x</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>D</mi><mi>y</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow></mtd></mlabeledtr></mtable><annotation encoding="application/x-tex">M_T= \begin{bmatrix}  1 &amp; 0 &amp; D_x \\ 0&amp; 1&amp; D_y\\  0 &amp; 0 &amp; 1  \end{bmatrix} \tag{4}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span><span class="tag"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">4</span></span><span class="mord">)</span></span></span></span></span></span></p><p>图像坐标系原点在世界坐标系中的坐标值（Dx，Dy）无法直接获取，从图5.4可知，相机在三维运动平台中XY向滑台位移分别为dx和dy，经计算得出此时相机在世界坐标系的坐标（Dx，Dy），计算公式为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable side="right"><mlabeledtr><mtd><mtext>(5)</mtext></mtd><mtd><mrow><mo fence="true">{</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>D</mi><mi>x</mi></msub><mo>=</mo><msub><mi>d</mi><mi>x</mi></msub><mo>−</mo><msub><mi>d</mi><mi>y</mi></msub><mo>×</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo>(</mo><mi>α</mi><mo>−</mo><mn>9</mn><msup><mn>0</mn><mi>o</mi></msup><mo>)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>D</mi><mi>y</mi></msub><mo>=</mo><msub><mi>d</mi><mi>y</mi></msub><mo>×</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo>(</mo><mi>α</mi><mo>−</mo><mn>9</mn><msup><mn>0</mn><mi>o</mi></msup><mo>)</mo></mrow></mstyle></mtd></mtr></mtable></mrow></mtd></mlabeledtr></mtable><annotation encoding="application/x-tex">\begin{cases} D_x=d_x-d_y \times sin(\alpha-90^o)\\ D_y=d_y \times cos(\alpha-90^o)\end{cases} \tag{5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">9</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">9</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="tag"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">5</span></span><span class="mord">)</span></span></span></span></span></span></p><p>图像中一点（u，v）转换为世界坐标系一点（x，y）的误差补偿模型表达式为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable side="right"><mlabeledtr><mtd><mtext>(6)</mtext></mtd><mtd><mrow><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>d</mi><mi>x</mi></msub><mo>−</mo><msub><mi>d</mi><mi>y</mi></msub><mo>×</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo>(</mo><mi>α</mi><mo>−</mo><mn>9</mn><msup><mn>0</mn><mi>o</mi></msup><mo>)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>d</mi><mi>y</mi></msub><mo>×</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo>(</mo><mi>α</mi><mo>−</mo><mn>9</mn><msup><mn>0</mn><mi>o</mi></msup><mo>)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>S</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>S</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>u</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>v</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow></mtd></mlabeledtr></mtable><annotation encoding="application/x-tex"> \begin{bmatrix}  x \\ y\\  1  \end{bmatrix} =   \begin{bmatrix}  1&amp;0&amp;d_x-d_y \times sin(\alpha-90^o)\\ 0&amp; 1&amp; d_y \times cos(\alpha-90^o)\\  0&amp;0&amp;1  \end{bmatrix}    \begin{bmatrix}  cos\theta &amp; -sin\theta &amp; 0 \\  sin\theta&amp; cos\theta&amp; 0 \\  0 &amp; 0 &amp; 1  \end{bmatrix}   \begin{bmatrix}   S_x &amp; 0 &amp; 0 \\   0&amp; S_y &amp; 0 \\  0 &amp; 0 &amp; 1  \end{bmatrix}    \begin{bmatrix}  u\\v\\  1  \end{bmatrix} \tag{6}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">9</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">9</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">u</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span><span class="tag"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">6</span></span><span class="mord">)</span></span></span></span></span></span></p><p>得到零件在世界坐标系中的坐标后，装配作业模块夹持壳体完成对正。由于世界坐标系和装配作业坐标系之间存在夹角，并且装配作业模块XY滑台不垂直，需要进行误差补偿。<br>装配过程仅需获取两个零件圆心的相对位置，不要求零件的绝对位置。可直接建立相对位置转换的误差补偿模型。设两零件在世界坐标系中的距离为（ΔX，ΔY），转换到装配作业坐标系后坐标为（ΔXC，ΔYC）。<br>首先对世界坐标系进行旋转补偿夹角φ，旋转矩阵<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>M</mi><mi>R</mi></msub></mrow><annotation encoding="application/x-tex">M_R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable side="right"><mlabeledtr><mtd><mtext>(7)</mtext></mtd><mtd><mrow><msub><mi>M</mi><mi>R</mi></msub><mo>=</mo><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>φ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mi>φ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>φ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>φ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow></mtd></mlabeledtr></mtable><annotation encoding="application/x-tex">M_R=   \begin{bmatrix}  cos\varphi &amp; sin\varphi &amp; 0\\  -sin\varphi &amp; cos\varphi &amp; 0\\0 &amp; 0&amp; 1  \end{bmatrix} \tag{7}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">φ</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">φ</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">φ</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">φ</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span><span class="tag"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">7</span></span><span class="mord">)</span></span></span></span></span></span></p><p>旋转变换之后得到两个圆心在装配作业坐标系中的坐标差，由于装配作业模块XY向滑台不垂直，需要计算出XY滑台应该补偿的实际距离，转换矩阵<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>M</mi><mi>D</mi></msub></mrow><annotation encoding="application/x-tex">M_D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable side="right"><mlabeledtr><mtd><mtext>(8)</mtext></mtd><mtd><mrow><msub><mi>M</mi><mi>D</mi></msub><mo>=</mo><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>t</mi><mi>a</mi><mi>n</mi><mo>(</mo><mi>β</mi><mo>−</mo><mn>9</mn><msup><mn>0</mn><mi>o</mi></msup><mo>)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>s</mi><mi>e</mi><mi>c</mi><mo>(</mo><mi>β</mi><mo>−</mo><mn>9</mn><msup><mn>0</mn><mi>o</mi></msup><mo>)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow></mtd></mlabeledtr></mtable><annotation encoding="application/x-tex">M_D=\begin{bmatrix}1 &amp; tan(\beta-90^o) &amp; 0\\0 &amp; sec(\beta-90^o) &amp; 0 \\0 &amp; 0 &amp;1\end{bmatrix} \tag{8}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">9</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">9</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span><span class="tag"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">8</span></span><span class="mord">)</span></span></span></span></span></span></p><p>零件圆心世界坐标系中的坐标差转换到装配作业坐标系中，并计算出实际的XY滑台补偿位移量（ΔXC0，ΔYC0）误差补偿模型的矩阵表达式为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable side="right"><mlabeledtr><mtd><mtext>(9)</mtext></mtd><mtd><mrow><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">Δ</mi><msub><mi>X</mi><mrow><mi>C</mi><mi>O</mi></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">Δ</mi><msub><mi>Y</mi><mrow><mi>C</mi><mi>O</mi></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>t</mi><mi>a</mi><mi>n</mi><mo>(</mo><mi>β</mi><mo>−</mo><mn>9</mn><msup><mn>0</mn><mi>o</mi></msup><mo>)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>s</mi><mi>e</mi><mi>c</mi><mo>(</mo><mi>β</mi><mo>−</mo><mn>9</mn><msup><mn>0</mn><mi>o</mi></msup><mo>)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>φ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mi>φ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>φ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>φ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">Δ</mi><mi>X</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">Δ</mi><mi>Y</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow></mtd></mlabeledtr></mtable><annotation encoding="application/x-tex"> \begin{bmatrix}  \Delta X_{CO} \\   \Delta Y_{CO} \\  1  \end{bmatrix} =   \begin{bmatrix}1 &amp; tan(\beta-90^o) &amp; 0\\0 &amp; sec(\beta-90^o) &amp; 0 \\0 &amp; 0 &amp;1\end{bmatrix}   \begin{bmatrix}  cos\varphi &amp; sin\varphi &amp; 0\\  -sin\varphi &amp; cos\varphi &amp; 0\\0 &amp; 0&amp; 1  \end{bmatrix}   \begin{bmatrix}  \Delta X\\   \Delta Y\\  1  \end{bmatrix} \tag{9}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">Δ</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">O</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">Δ</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">O</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">9</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">9</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">φ</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">φ</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">φ</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">φ</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">Δ</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">Δ</span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span><span class="tag"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">9</span></span><span class="mord">)</span></span></span></span></span></span></p><p>终于敲完了，latex确实很好用，矩阵书写很方便，坚持用Markdown来写博客！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;就像来自遥远宇宙的一束光，不知道它从哪里来，也不知道它到哪里去，从我们头上掠过，波澜不惊。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;误差来源&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#误差来源&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="Computer Vision" scheme="http://yoursite.com/categories/Computer-Vision/"/>
    
    
      <category term="坐标转换" scheme="http://yoursite.com/tags/%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/"/>
    
      <category term="camera calibrate" scheme="http://yoursite.com/tags/camera-calibrate/"/>
    
  </entry>
  
  <entry>
    <title>一款类似于mac-dock栏的windows软件</title>
    <link href="http://yoursite.com/2019/01/28/%E4%B8%80%E6%AC%BE%E7%B1%BB%E4%BC%BC%E4%BA%8Emac-dock%E6%A0%8F%E7%9A%84windows%E8%BD%AF%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/01/28/一款类似于mac-dock栏的windows软件/</id>
    <published>2019-01-28T08:41:17.000Z</published>
    <updated>2019-03-05T07:48:35.853Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接：一款类似于mac-dock栏的windows软件</p><h3 id="一款类似于mac-dock栏的windows软件"><a class="markdownIt-Anchor" href="#一款类似于mac-dock栏的windows软件"></a> 一款类似于mac-dock栏的windows软件</h3><p><a href="https://imgchr.com/i/kXj3PU" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/03/05/kXj3PU.md.png" alt="kXj3PU.md.png"></a><br>软件名称叫 <code>Winstep Nexus Ultimate</code></p><p>软件链接如下：</p><p>链接：<a href="https://www.lanzous.com/i1xnevc" target="_blank" rel="noopener">https://www.lanzous.com/i1xnevc</a>    密码:5vsy</p><h4 id="安装破解方法"><a class="markdownIt-Anchor" href="#安装破解方法"></a> 安装破解方法</h4><ol><li>下载安装Winstep Nexus，安装完成后不要启动</li><li>以管理员权限运行Activation.exe，将其安装到Winstep Nexus默认目录中</li><li>启动Winstep Nexus，输入任意用户名和密钥注册</li><li>重启Winstep Nexus即为激活版</li></ol><p>注：不能更新，如果更新，可重新执2-4步</p><h4 id="效果图"><a class="markdownIt-Anchor" href="#效果图"></a> 效果图</h4><p>这是我的桌面，软件的主题有很多，挑自己喜欢的风格和颜色即可。</p><p><a href="https://imgchr.com/i/kXvZFK" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/03/05/kXvZFK.md.png" alt="kXvZFK.md.png"></a></p><blockquote><p>每天写点东西，让坚持变成习惯!</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文链接：一款类似于mac-dock栏的windows软件&lt;/p&gt;
&lt;h3 id=&quot;一款类似于mac-dock栏的windows软件&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#一款类似于mac-dock栏的windows软件&quot;&gt;&lt;/a&gt; 一款
      
    
    </summary>
    
      <category term="黑科技" scheme="http://yoursite.com/categories/%E9%BB%91%E7%A7%91%E6%8A%80/"/>
    
    
      <category term="黑科技" scheme="http://yoursite.com/tags/%E9%BB%91%E7%A7%91%E6%8A%80/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="http://yoursite.com/2019/01/27/hello-world/"/>
    <id>http://yoursite.com/2019/01/27/hello-world/</id>
    <published>2019-01-26T16:00:00.000Z</published>
    <updated>2019-01-29T05:25:15.170Z</updated>
    
    <content type="html"><![CDATA[<p>终于搭建成功了个人网站，愿君乘风破浪，不枉满腔赤诚！</p><h2 id="常用操作"><a class="markdownIt-Anchor" href="#常用操作"></a> 常用操作</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>生成一篇新的博客，然后选用一款<code>markdown</code>编辑器进行编辑即可</p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><p>这条语句经常用来本地测试博客的更改情况和效果。</p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>生成文件</p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>部署到服务器</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;终于搭建成功了个人网站，愿君乘风破浪，不枉满腔赤诚！&lt;/p&gt;
&lt;h2 id=&quot;常用操作&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#常用操作&quot;&gt;&lt;/a&gt; 常用操作&lt;/h2&gt;
&lt;h3 id=&quot;create-a-new-post&quot;&gt;&lt;a class
      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
